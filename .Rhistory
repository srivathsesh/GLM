predictors.1 <- unlist(strsplit(as.character(fit$formula), "|",fixed = T))
predictors.1
formulae <- as.character(formula(fit))[3]
formulae
predictors <- unlist(strsplit(formulae,split = "|", fixed = T))
predictors
countcomp <- predictors[1]
logistcomp <- predictors[2]
countcom
countcomp
logistcomp
predictors.comp <- unlist(strsplit(countcomp,split = "+", fixed = T))
predictors.logis <- unlist(strsplit(logistcomp,split = "+", fixed = T))
predictors.comp
predictors.logis
coefficients(fit)
coef <- round(coefficients(fit),rounding)
coef.count <- coef[1:length(predictors.comp)+1]
coef.count
countcomp
predictors.comp
coef.count <- coef[1:3]
coef.count
coef.count <- coef[1:length(predictors.comp)+1]
coef.count
coef.count <- coef[0:length(predictors.comp)+1]
coef.count
coef.logis <- coef[0:length(predictors.logis)+1]
coef.logis
coef
coef.logis <- coef[length(predictors.comp)+1:length(predictors.logis)+1]
coef.logis
coef.logis <- coef[length(predictors.comp):length(predictors.logis)+1]
coef.logis
coef.logis <- coef[length(predictors.comp)+1:length(predictors.logis)+1]
coef.count <- coef[0:length(predictors.comp)+1]
coef.logis
coef.logis <- coef[length(predictors.comp)+1:length(predictors.logis)+2]
coef.logis
coef.logis <- coef[length(predictors.comp)+2:length(predictors.logis)+1]
coef.logis
coef
coef.logis <- coef[length(predictors.comp)+2:length(predictors.logis)+1]
coef.logis
signs.count <- ifelse(sign(coef.count)==1,"+", "-")
signs.count
signs.logis <- ifelse(sign(coef.logis)==1,"+", "-")
signs.logis
rev(coef.logis)
formulae <- as.character(formula(fit))[3]
predictors <- unlist(strsplit(formulae,split = "|", fixed = T))
countcomp <- predictors[1]
logistcomp <- predictors[2]
predictors.comp <- unlist(strsplit(countcomp,split = "+", fixed = T))
predictors.logis <- unlist(strsplit(logistcomp,split = "+", fixed = T))
coef <- round(coefficients(fit),rounding)
coef.count <- coef[0:length(predictors.comp)+1]
coef.logis <- rev(coef[length(predictors.comp)+2:length(predictors.logis)+1])
signs.count <- ifelse(sign(coef.count)==1,"+", "-")
signs.logis <- ifelse(sign(coef.logis)==1,"+", "-")
Betas.count <- paste(abs(coef.count[2:length(coef.count)]),"*",predictors.comp)
Betas.logis <- paste(abs(coef.logis[2:length(coef.logis)]),"*",predictors.logis)
equation.count <- paste(target, "=", paste(coef.count[1],paste(paste(signs.count[2:length(signs.count)],Betas.count),collapse = " ")))
equation.logis <- paste(target, "=", paste(coef.logis[1],paste(paste(signs.logis[2:length(signs.logis)],Betas.logis),collapse = " ")))
formulae <- as.character(formula(fit))[3]
predictors <- unlist(strsplit(formulae,split = "|", fixed = T))
countcomp <- predictors[1]
logistcomp <- predictors[2]
predictors.comp <- unlist(strsplit(countcomp,split = "+", fixed = T))
predictors.logis <- unlist(strsplit(logistcomp,split = "+", fixed = T))
coef <- round(coefficients(fit),rounding)
coef.count <- coef[0:length(predictors.comp)+1]
coef.logis <- rev(coef[length(predictors.comp)+2:length(predictors.logis)+1])
signs.count <- ifelse(sign(coef.count)==1,"+", "-")
signs.logis <- ifelse(sign(coef.logis)==1,"+", "-")
Betas.count <- paste(abs(coef.count[2:length(coef.count)]),"*",predictors.comp)
Betas.logis <- paste(abs(coef.logis[2:length(coef.logis)]),"*",predictors.logis)
equation.count <- paste(target, "=", paste(coef.count[1],paste(paste(signs.count[2:length(signs.count)],Betas.count),collapse = " ")))
equation.logis <- paste(target, "=", paste(coef.logis[1],paste(paste(signs.logis[2:length(signs.logis)],Betas.logis),collapse = " ")))
equation.count
equation.logis
summary(fit)
paste(equation.count, "|", equation.logis)
source('~/Documents/MSPA/PREDICT 411/RegressionGLM/getequation.R')
zip.models <- list(poisson.zif.mdl1,poisson.zif.mdl2)
zip.equations <- sapply(zip.models,function(x) getequation("TARGET",x,rounding = 2))
zip.summary <- cbind(model = zip.equations,rbind(glance.poisson.zif.mdl1,glance.poisson.zif.mdl2))
pander::pandoc.table(zip.summary,style = "grid",digits = 2,caption = "ZIP fit summary")
zinb.mdl1 <- pscl::zeroinfl(TARGET ~ LabelAppeal+ STARS|STARS , data = train, dist = "negbin",EM = T)
summary(zinb.mdl1)
plot(zinb.mdl1)
plot(zinb.mdl1$model$TARGET,zinb.mdl1$fitted.values)
plot(zinb.mdl1$model$TARGET-zinb.mdl1$fitted.values,zinb.mdl1$fitted.values)
plot(zinb.mdl1$model$TARGET,zinb.mdl1$model$TARGET-zinb.mdl1$fitted.values)
plot(zinb.mdl1$model$TARGET,round(zinb.mdl1$model$TARGET-zinb.mdl1$fitted.values,0))
predict.zinb.mdl1 <- predict(zinb.mdl1,newdata = test, type = "response")
MAE.zinb.mdl1 <- mean(abs(test$TARGET - predict.zinb.mdl1),na.rm = T)
MAE.zinb.mdl1
drop1(zinb.mdl1)
glance.zinb.mdl1 <- data.frame(LogLik = logLik(zinb.mdl1),AIC = AIC(zinb.mdl1), BIC = BIC(zinb.mdl1), MAE = MAE.zinb.mdl1)
glance.zinb.mdl1 <- data.frame(LogLik = logLik(zinb.mdl1),AIC = AIC(zinb.mdl1), BIC = BIC(zinb.mdl1), MAE = MAE.zinb.mdl1)
zing.equation <- getequation("TARGET",zinb.mdl1)
zinb.summary <- cbind(model = zinb.equation,glance.zinb.mdl1)
zinb.equation <- getequation("TARGET",zinb.mdl1)
glance.zinb.mdl1 <- data.frame(LogLik = logLik(zinb.mdl1),AIC = AIC(zinb.mdl1), BIC = BIC(zinb.mdl1), MAE = MAE.zinb.mdl1)
zinb.summary <- cbind(model = zinb.equation,glance.zinb.mdl1)
pander::pandoc.table(zinb.summary, caption = "Zero inflated negative binomial model", digits = 2, style = "grid")
zinb.mdl1 <- pscl::zeroinfl(TARGET ~ LabelAppeal+ STARS|STARS , data = train, dist = "negbin",EM = T)
summary(zinb.mdl1)
par(mfrow = c(1,2))
plot(zinb.mdl1$model$TARGET,round(zinb.mdl1$model$TARGET-zinb.mdl1$fitted.values,0), xlab = "TARGET", ylab = "Rounded residuals")
hist(round(zinb.mdl1$model$TARGET-zinb.mdl1$fitted.values,0),xlab = "Rounded residuals", main = "Histogram of residuals (rounded)")
predict.zinb.mdl1 <- predict(zinb.mdl1,newdata = test, type = "response")
MAE.zinb.mdl1 <- mean(abs(test$TARGET - predict.zinb.mdl1),na.rm = T)
zinb.equation <- getequation("TARGET",zinb.mdl1)
glance.zinb.mdl1 <- data.frame(LogLik = logLik(zinb.mdl1),AIC = AIC(zinb.mdl1), BIC = BIC(zinb.mdl1), MAE = MAE.zinb.mdl1)
zinb.summary <- cbind(model = zinb.equation,glance.zinb.mdl1)
pander::pandoc.table(zinb.summary, caption = "Zero inflated negative binomial model", digits = 2, style = "grid")
source('~/Documents/MSPA/PREDICT 411/RegressionGLM/getequation.R')
zinb.equation <- getequation("TARGET",zinb.mdl1)
countcomp
predictors
logistcomp
coef
coefficients(fit)
lm.mdl1 <- lm(TARGET ~ STARS + LabelAppeal + Alcohol, data = train)
summary(lm.mdl1)
lm.mdl1 <- lm(TARGET ~ STARS + LabelAppeal + Alcohol + AcidIndex, data = train)
summary(lm.mdl1)
drop1(lm.mdl1, test = "F")
lm.mdl1 <- lm(TARGET ~ STARS + LabelAppeal + AcidIndex, data = train)
summary(lm.mdl1)
drop1(lm.mdl1, test = "F")
summary(lm.mdl1)
lm.mdl1 <- lm(TARGET ~ STARS + LabelAppeal + AcidIndex, data = train)
summary(lm.mdl1)
drop1(lm.mdl1, test = "F")
lm.mdl1 <- lm(TARGET ~ STARS + LabelAppeal, data = train)
summary(lm.mdl1)
drop1(lm.mdl1, test = "F")
plot(lm.mdl1)
lm.mdl1 <- lm(TARGET ~ STARS + LabelAppeal, data = train)
summary(lm.mdl1)
drop1(lm.mdl1, test = "F")
par(mfrow = c(2,2))
plot(lm.mdl1)
predict.lm.mdl1 <- predict(lm.mdl1, newdata = test)
MAE.lm.mdl1 <- mean(abs(predict.lm.mdl1 - test$TARGET), na.rm = T)
MAE.lm.mdl1
glance.lm.mdl1 <- broom::glance(lm.mdl1)
lm.equation <- getequation("TARGET",lm.mdl1)
lm.equation
MAE.lm.mdl1
pander::pandoc.table(glance.lm.mdl1, caption = "OLS regression", style = "grid")
lm.mdl1 <- lm(TARGET ~ STARS + LabelAppeal, data = train)
summary(lm.mdl1)
drop1(lm.mdl1, test = "F")
par(mfrow = c(2,2))
plot(lm.mdl1)
predict.lm.mdl1 <- predict(lm.mdl1, newdata = test)
MAE.lm.mdl1 <- mean(abs(predict.lm.mdl1 - test$TARGET), na.rm = T)
glance.lm.mdl1 <- broom::glance(lm.mdl1)
lm.equation <- getequation("TARGET",lm.mdl1)
glance.lm.mdl1$model <- lm.equation
glance.lm.mdl1$MAE <- MAE.lm.mdl1
pander::pandoc.table(glance.lm.mdl1, caption = "OLS regression", style = "grid")
lm.mdl1 <- lm(TARGET ~ STARS + LabelAppeal, data = train)
summary(lm.mdl1)
drop1(lm.mdl1, test = "F")
par(mfrow = c(2,2))
plot(lm.mdl1)
predict.lm.mdl1 <- predict(lm.mdl1, newdata = test)
MAE.lm.mdl1 <- mean(abs(predict.lm.mdl1 - test$TARGET), na.rm = T)
glance.lm.mdl1 <- broom::glance(lm.mdl1)
lm.equation <- getequation("TARGET",lm.mdl1)
glance.lm.mdl1$MAE <- MAE.lm.mdl1
summary.lm.mdl1 <- cbind(model = lm.equation, glance.lm.mdl1)
pander::pandoc.table(glance.lm.mdl1, caption = "OLS regression", style = "grid")
pander::pandoc.table(summary.lm.mdl1, caption = "OLS regression", style = "grid")
pander::pandoc.table(summary.lm.mdl1[,c("model","adj.r.squared","AIC","BIC","MAE")], caption = "OLS regression", style = "grid")
pander::pandoc.table(zinb.summary, caption = "Zero inflated negative binomial model", digits = 2, style = "grid")
zip.summary$model[1]
as.character(zip.summary$model[1])
winedata.test <- read.csv("wine_test.csv")
winedata.test <- VIM::kNN(winedata.test)
View(winedata.test)
winedata.test.clean <- winedata.test[,-2]
winedata.test.clean <- VIM::kNN(winedata.test.clean)
as.character(zip.summary$model[1])
eta <- winedata.test.clean %>% 11.5 - 13.13 *  STARS
eta <- 11.5 - 13.13 *  winedata.test.clean$STARS
prob.no.sale <- (1+exp(eta))^-1
plot(prob.no.sale)
summary(poisson.hurdle.mdl1)
getequation("TARGET",poisson.hurdle.mdl1,2)
prob.no.sale <- (1+exp(eta*-1))^-1
plot(prob.no.sale)
hist(winedata.test.clean$STARS)
eta <- 11.5 - 13.13 *  winedata.test.clean$STARS
plot(eta)
prob.no.sale <- (1+exp(-1*eta))^-1
plot(eta)
plot(prob.no.sale)
hist(prob.no.sale)
TARGET <- predict(poisson.zif.mdl1, newdata = winedata.test.clean, type = "response")
hist(TARGET)
getequation(poisson.hurdle.mdl2)
getequation("TARGET",poisson.hurdle.mdl2)
eta <- 1.34 + 0.24 * winedata.test.clean$LabelAppeal
prob.no.sale <- (1 + exp(-1*eta))^-1
plot(prob.no.sale)
prob.sale <- 1 - prob.no.sale
plot(prob.sale)
prob.sale <- 1 - prob.no.sale
plot(prob.sale)
eta <- 22.15 - 23.7 * winedata.test.clean$STARS
prob.no.sale <- (1 + exp(-1*eta))^-1
prob.sale <- 1 - prob.no.sale
plot(prob.sale)
prob.sale <- 1 - prob.no.sale
plot(prob.sale)
predictedcounts <- exp(1.33 + 0.25* winedata.test.clean$LabelAppeal) *  prob.sale
hist(predictedcounts)
TARGET <- predict(poisson.zif.mdl2, newdata = winedata.test.clean, type = "response")
hist(TARGET)
winedata.test$TARGET <- predictedcounts
write.csv(file = "wine_test_SESHADRI.csv",winedata.test[,c("Index","TARGET")])
winedata.test$TARGET <- predictedcounts
write.csv(file = "wine_test_SESHADRI.csv",winedata.test[,c("Index","TARGET")])
predictedcounts <- round(exp(1.33 + 0.25* winedata.test.clean$LabelAppeal) *  prob.sale,0)
hist(predictedcounts)
winedata.test$TARGET <- predictedcounts
write.csv(file = "wine_test_SESHADRI.csv",winedata.test[,c("Index","TARGET")])
write.csv(file = "wine_test_SESHADRI.csv",winedata.test[,c("INDEX","TARGET")])
TARGET <- round(predict(poisson.zif.mdl2, newdata = winedata.test.clean, type = "response"),0)
hist(TARGET)
hist(predictedcounts)
knitr::opts_chunk$set(echo = F, warning = F, message = F)
library(magrittr)
source('getequation.R')
winedata <- read.csv(file = 'wine.csv')
library(mosaic)
# Compute overall statistic and show missing values
sanitycheck <- do.call(rbind,dfapply(winedata,favstats, select = is.numeric))
rowname <- rownames(sanitycheck)
rownames(sanitycheck) <- rowname
knitr::kable(round(sanitycheck,2), caption = "Summary Stats and missing values")
Missing.Stars <- as.factor(ifelse(is.na(winedata$STARS),1,0))
Missing.Alch <- as.factor(ifelse(is.na(winedata$Alcohol),1,0))
Missing.Sulph <- as.factor(ifelse(is.na(winedata$Sulphates),1,0))
Missing.pH <- as.factor(ifelse(is.na(winedata$Sulphates),1,0))
Missing.TSD <- as.factor(ifelse(is.na(winedata$TotalSulfurDioxide),1,0))
Missing.FSD <- as.factor(ifelse(is.na(winedata$FreeSulfurDioxide),1,0))
Missing.Chl <- as.factor(ifelse(is.na(winedata$Chlorides),1,0))
Missing.ResSug <- as.factor(ifelse(is.na(winedata$ResidualSugar),1,0))
winedataeda <- cbind(winedata, Missing.ResSug,Missing.Chl,Missing.FSD,Missing.TSD,Missing.pH,Missing.Sulph,Missing.Alch,Missing.Stars)
# Write to file for examination
# write.csv(file = 'winedatamod.csv', winedata)
library(ggplot2)
p <- ggplot(data = winedataeda)
p + geom_bar(mapping = aes(x = TARGET, col = Missing.Stars, fill = Missing.Stars)) + theme_classic()
#winedata %>% group_by(TARGET) %>% summarise_at("STARS", function(x) sum(is.na(x))/length(x)*100)
windedataMelt <- reshape2::melt(winedata[,-1])
ggplot(data = windedataMelt,mapping = aes(x = value)) + geom_histogram() + facet_wrap(~variable,scales = "free_x") + theme_bw()
wine.complete <- winedata[complete.cases(winedata),]
cordata <- cor(wine.complete)
corrplot::corrplot(cordata, tl.cex = 0.7)
winedata <- winedata %>% mutate(TARGET0 = as.factor(ifelse(TARGET > 0 ,0, 1)))
predictors <- colnames(winedata)[c(-1,-2,-17)]
response <- c("TARGET","TARGET0")
tr <- rpart::rpart(formula = TARGET0 ~ ., data = winedata[,c(predictors, response[2])], method = "class")
library(partykit)
plot(partykit::as.party(tr), gp = gpar(fontsize = 8 ))
randtr <- randomForest::randomForest(formula = TARGET0 ~ ., data = winedata[complete.cases(winedata),c(predictors, response[2])], importance = T)
randomForest::varImpPlot(randtr,main = 'Variable Importance plot - Random forest')
windedata.filtered <- winedata %>% filter(TARGET0 == 0)
tr2 <- rpart::rpart(formula = TARGET ~ ., data = windedata.filtered[,c(predictors, response[1])])
plot(as.party(tr2),gp = gpar(fontsize = 8 ))
randtr2 <- randomForest::randomForest(formula = TARGET ~ ., data = windedata.filtered[complete.cases(windedata.filtered),c(predictors, response[1])], importance = T)
randomForest::varImpPlot(randtr2, main = "Variable importance plot from random forest - TARGET")
set.seed(10)
train <- winedata %>%  dplyr::sample_frac(0.75)
test <- winedata[!winedata$INDEX %in% train$INDEX,]
par(mfrow = c(1,2))
hist(train$TARGET, main = "TARGET from training sample", xlab = "TARGET", col = "red")
hist(test$TARGET, main = "TARGET from test sample", xlab = "TARGET", col = "blue")
issue.train <- train %>% filter(!is.na(STARS))
issue.test <- test %>% filter(!is.na(STARS))
par(mfrow = c(1,2))
hist(issue.train$TARGET, col = "red", main = "Histogram of TARGET - Training", xlab = "TARGET")
hist(issue.test$TARGET, col = "blue", main = "Histogram of TARGET - Test", xlab = "TARGET")
train <- train %>% mutate(STARS = ifelse(is.na(STARS) & TARGET == 0,0,STARS))
test <- train %>% mutate(STARS = ifelse(is.na(STARS) & TARGET == 0,0,STARS))
poisson.mdl1 <- glm(TARGET ~ LabelAppeal,family = poisson(link = 'log'), data = train)
summary(poisson.mdl1)
lmtest::lrtest(poisson.mdl1)
glance.poisson.mdl1 <- broom::glance(poisson.mdl1)
glance.poisson.mdl1$pseudoR.Sq <- (poisson.mdl1$null.deviance - poisson.mdl1$deviance)/poisson.mdl1$null.deviance
poisson.mdl1.predict <- predict(poisson.mdl1,newdata = subset(test,!is.na(test$LabelAppeal)), type = 'response')
poisson.mdl1.coefs <- broom::tidy(poisson.mdl1)
glance.poisson.mdl1$MAE <- mean(abs(test$TARGET[!is.na(test$TARGET)] - round(poisson.mdl1.predict,0)))
knitr::kable(glance.poisson.mdl1,digits = 2,caption = "Simple Poisson model statistics")
# poisson.mdl2 <- glm(TARGET ~ LabelAppeal + STARS + Alcohol,family = poisson(link = 'log'), data = train)
# summary(poisson.mdl2)
#
# poisson.full <- glm(TARGET ~ .,family = poisson(link = 'log'), data = train[,c(-1,-17)] )
# summary(poisson.full)
# 1 -pchisq(deviance(poisson.mdl2)-deviance(poisson.full),11)
layout <- matrix(c(1,2,3,4,5,5), ncol = 2, byrow = T)
layout(layout)
plot(poisson.mdl1)
plot(poisson.mdl1$data$TARGET , round(poisson.mdl1$fitted.values,0), xlab = "TARGET", ylab = "Rounded fitted")
poisson.mdl2 <- glm(TARGET ~ LabelAppeal + STARS, family = poisson(link = "log"), data = train[!is.na(train$LabelAppeal),])
summary(poisson.mdl2)
lmtest::lrtest(poisson.mdl2)
glance.poisson.mdl2 <- broom::glance(poisson.mdl2)
glance.poisson.mdl2$pseudoR.Sq <- (poisson.mdl2$null.deviance - poisson.mdl2$deviance)/poisson.mdl2$null.deviance
poisson.mdl2.predict <- predict(poisson.mdl2,newdata = subset(test,!(is.na(test$LabelAppeal)|is.na(test$STARS))), type = 'response')
poisson.mdl2.coefs <- broom::tidy(poisson.mdl2)
glance.poisson.mdl2$MAE <- mean(abs(test[complete.cases(test[,c(14,16)]),2] - round(poisson.mdl2.predict,0)))
knitr::kable(glance.poisson.mdl2,digits = 2,caption = "Poisson model statistics with STARS & LabelAppeal as predictors")
layout(layout)
plot(poisson.mdl2)
plot(train[complete.cases(train[,c(14,16)]),2] , round(poisson.mdl2$fitted.values,0), xlab = "TARGET", ylab = "Rounded fitted")
drop1(poisson.mdl2, test = "Chisq")
poisson.mdl3 <- glm(TARGET ~ STARS,family = poisson(link = 'log'), data = train)
summary(poisson.mdl3)
lmtest::lrtest(poisson.mdl3)
glance.poisson.mdl3 <- broom::glance(poisson.mdl3)
glance.poisson.mdl3$pseudoR.Sq <- (poisson.mdl3$null.deviance - poisson.mdl3$deviance)/poisson.mdl3$null.deviance
poisson.mdl3.predict <- predict(poisson.mdl3,newdata = subset(test,!is.na(test$STARS)), type = 'response')
poisson.mdl3.coefs <- broom::tidy(poisson.mdl3)
glance.poisson.mdl3$MAE <- mean(abs(abs(test[complete.cases(test[,16]),2] - round(poisson.mdl3.predict,0))))
knitr::kable(glance.poisson.mdl3,digits = 2,caption = "Simple Poisson model statistics with STARTS as regressor")
layout(layout)
plot(poisson.mdl3)
plot(train[complete.cases(train[,16]),2] , round(poisson.mdl3$fitted.values,0), xlab = "TARGET", ylab = "Rounded fitted")
poisson.mdl4 <- glm(TARGET ~ LabelAppeal, data = train[complete.cases(train[,c(14,16)]),], family = poisson(link = "log"))
summary(poisson.mdl4)
lmtest::lrtest(poisson.mdl4)
glance.poisson.mdl4 <- broom::glance(poisson.mdl4)
glance.poisson.mdl4$pseudoR.Sq <- (poisson.mdl4$null.deviance - poisson.mdl4$deviance)/poisson.mdl4$null.deviance
poisson.mdl4.predict <- predict(poisson.mdl4,newdata = subset(test,!is.na(test$STARS)), type = 'response')
poisson.mdl4.coefs <- broom::tidy(poisson.mdl4)
glance.poisson.mdl4$MAE <- mean(abs(abs(test[complete.cases(test[,16]),2] - round(poisson.mdl4.predict,0))))
knitr::kable(glance.poisson.mdl4,digits = 2,caption = "Simple Poisson model statistics with LabelAppeal as regressor; non missing cases for STARS and LabelAppeal")
layout(layout)
plot(poisson.mdl4)
plot(train[complete.cases(train[,16]),2] , round(poisson.mdl4$fitted.values,0), xlab = "TARGET", ylab = "Rounded fitted")
poisson.mdl5 <- glm(TARGET ~ LabelAppeal + STARS + Alcohol, data = train[complete.cases(train[,c(13,14,16)]),], family = poisson(link = "log"))
summary(poisson.mdl5)
lmtest::lrtest(poisson.mdl5)
glance.poisson.mdl5 <- broom::glance(poisson.mdl5)
glance.poisson.mdl5$pseudoR.Sq <- (poisson.mdl5$null.deviance - poisson.mdl5$deviance)/poisson.mdl5$null.deviance
poisson.mdl5.predict <- predict(poisson.mdl5,newdata = test[complete.cases(test[,c(13,14,16)]),], type = 'response')
poisson.mdl5.coefs <- broom::tidy(poisson.mdl5)
glance.poisson.mdl5$MAE <- mean(abs(abs(test[complete.cases(test[,c(13,14,16)]),2] - round(poisson.mdl5.predict,0))))
knitr::kable(glance.poisson.mdl5,digits = 2,caption = "Poisson model statistics with LabelAppeal, STARS, ALCOHOL as regressors")
layout(layout)
plot(poisson.mdl5, col =train[complete.cases(train[,c(13,14,16)]),2] )
plot(train[complete.cases(train[,c(13,14,16)]),2] , round(poisson.mdl5$fitted.values,0), xlab = "TARGET", ylab = "Rounded fitted")
drop1(poisson.mdl5, test = "Chisq")
poisson.mdl6 <- glm(TARGET ~ LabelAppeal + STARS + Alcohol + AcidIndex, data = train[complete.cases(train[,c(13,14,15,16)]),], family = poisson(link = "log"))
summary(poisson.mdl6)
lmtest::lrtest(poisson.mdl6)
glance.poisson.mdl6 <- broom::glance(poisson.mdl6)
glance.poisson.mdl6$pseudoR.Sq <- (poisson.mdl6$null.deviance - poisson.mdl6$deviance)/poisson.mdl6$null.deviance
poisson.mdl6.predict <- predict(poisson.mdl6,newdata = test[complete.cases(test[,c(13,14,15,16)]),], type = 'response')
poisson.mdl6.coefs <- broom::tidy(poisson.mdl6)
glance.poisson.mdl6$MAE <- mean(abs(abs(test[complete.cases(test[,c(13,14,15,16)]),2] - round(poisson.mdl6.predict,0))))
knitr::kable(glance.poisson.mdl6,digits = 2,caption = "Poisson model statistics with LabelAppeal, STARS, ALCOHOL, AcidIndex as regressors")
drop1(poisson.mdl6, test = "Chisq")
poisson.mdl7 <- glm(TARGET ~ LabelAppeal + STARS + AcidIndex, data = train[complete.cases(train[,c(14,15,16)]),], family = poisson(link = "log"))
summary(poisson.mdl7)
lmtest::lrtest(poisson.mdl7)
glance.poisson.mdl7 <- broom::glance(poisson.mdl7)
glance.poisson.mdl7$pseudoR.Sq <- (poisson.mdl7$null.deviance - poisson.mdl7$deviance)/poisson.mdl7$null.deviance
poisson.mdl7.predict <- predict(poisson.mdl7,newdata = test[complete.cases(test[,c(14,15,16)]),], type = 'response')
poisson.mdl7.coefs <- broom::tidy(poisson.mdl7)
glance.poisson.mdl7$MAE <- mean(abs(abs(test[complete.cases(test[,c(14,15,16)]),2] - round(poisson.mdl7.predict,0))))
knitr::kable(glance.poisson.mdl7,digits = 2,caption = "Poisson model statistics with LabelAppeal, STARS, ALCOHOL, AcidIndex as regressors")
drop1(poisson.mdl7, test = "Chisq")
poisson.models <- list(poisson.mdl1, poisson.mdl2, poisson.mdl3, poisson.mdl4,poisson.mdl5,poisson.mdl6,poisson.mdl7)
poisson.equations <- sapply(poisson.models,function(x) getequation("TARGET",x, rounding = 3))
poisson.summary <- cbind(model = poisson.equations,rbind(glance.poisson.mdl1,glance.poisson.mdl2,glance.poisson.mdl3,glance.poisson.mdl4,glance.poisson.mdl5,glance.poisson.mdl6,glance.poisson.mdl7))
pander::pandoc.table(poisson.summary,digits = 2,caption = "Poisson fit summary",style = "grid")
poisson.zif.mdl1 <- pscl::zeroinfl(TARGET ~ LabelAppeal+ STARS|STARS , data = train )
summary(poisson.zif.mdl1)
par(mfrow = c(1,2))
plot(poisson.zif.mdl1$model$TARGET,poisson.zif.mdl1$model$TARGET - round(poisson.zif.mdl1$fitted.values,0), xlab = "TARGET", ylab = "Residual (rounded)", main = "Residual vs TARGET")
abline(0,0,lty = 2,col = "red")
hist(poisson.zif.mdl1$model$TARGET - round(poisson.zif.mdl1$fitted.values,0), xlab = 'residuals',main = "histogram of residuals- ZIP",col = "black")
tst <- glm(TARGET0 ~ STARS,family = binomial(link = "logit"), data = train,subset = !is.na(train$STARS) )
summary(tst)
drop1(tst,test = "Chisq")
rocCurve.train.logis <- pROC::roc(response = train[!is.na(train$STARS),"TARGET0"], predictor = tst$fitted.values)
rocCurve.test.logis <- pROC::roc(response = test[!is.na(train$STARS),"TARGET0"],predictor = predict(tst,newdata = test[!is.na(test$STARS),],type = "response"))
plot(rocCurve.train.logis, asp = NA, legacy.axes = T)
plot(rocCurve.test.logis, legacy.axes = T, asp = NA, add = T, col = "red")
legend(0.2,0.6,paste("AUC = ",round(pROC::auc(rocCurve.train.logis),2)))
poisson.hurdle.mdl1 <- glm(TARGET ~ LabelAppeal + STARS, family = poisson(link = "log"), data = train[ train$TARGET0 == 0 & !is.na(train$STARS),])
summary(poisson.hurdle.mdl1)
drop1(poisson.hurdle.mdl1, test = "Chisq")
probsale <- predict(tst,newdata = train[ train$TARGET0 < 1 & !is.na(train$STARS),],type = "response")
predictedcount <- (1-probsale)*poisson.hurdle.mdl1$fitted.values
# plot(tst$fitted.values)
# plot(poisson.mdl2$fitted.values)
# plot(poisson.zif.mdl1$residuals)
#plot(train[train$TARGET0 < 1 & !is.na(train$STARS),2],train[ train$TARGET0 < 1 & !is.na(train$STARS),2]-round(predictedcount,0))
predictedCount2 <- (1 -predict(tst,newdata = train,type = "response") ) * predict(poisson.hurdle.mdl1, newdata = train, type = "response")
par(mfrow = c(1,2))
plot(train$TARGET,train$TARGET - round(predictedCount2,0), xlab = "TARGET", ylab = "Residuals (rounded)")
hist(train$TARGET - round(predictedCount2,0), xlab = "Residuals (rounded)",col = "black")
test.PredictedCount <- (1 -predict(tst,newdata = test,type = "response") ) * predict(poisson.hurdle.mdl1, newdata = test, type = "response")
MAE.zif.mdl1 <- mean(abs(test$TARGET - round(test.PredictedCount,0)),na.rm = T)
glance.poisson.zif.mdl1 <- data.frame(LogLik = logLik(poisson.zif.mdl1),AIC = AIC(poisson.zif.mdl1), BIC = BIC(poisson.zif.mdl1), MAE = MAE.zif.mdl1)
knitr::kable(glance.poisson.zif.mdl1, caption = "TARGET ~ LabelAppeal+ STARS|STARS")
poisson.zif.mdl2 <- pscl::zeroinfl(TARGET ~ LabelAppeal|STARS , data = train )
summary(poisson.zif.mdl2)
par(mfrow = c(1,2))
plot(poisson.zif.mdl2$model$TARGET,poisson.zif.mdl2$model$TARGET - round(poisson.zif.mdl2$fitted.values,0), xlab = "TARGET", ylab = "Residual (rounded)", main = "Residual vs TARGET")
abline(0,0,lty = 2,col = "red")
hist(poisson.zif.mdl2$model$TARGET - round(poisson.zif.mdl2$fitted.values,0), xlab = 'residuals',main = "histogram of residuals- ZIP",col = "black")
MAE.zif.mdl2 <- mean(abs(test$TARGET - predict(poisson.zif.mdl2,newdata = test,type = "response")),na.rm = T)
glance.poisson.zif.mdl2 <- data.frame(LogLik = logLik(poisson.zif.mdl2),AIC = AIC(poisson.zif.mdl2), BIC = BIC(poisson.zif.mdl2), MAE = MAE.zif.mdl2)
knitr::kable(glance.poisson.zif.mdl2, caption = "TARGET ~ LabelAppeal|STARS", digits = 2)
poisson.hurdle.mdl2 <- glm(TARGET ~ LabelAppeal, family = poisson(link = "log"), data = train[ train$TARGET0 == 0 & !is.na(train$STARS),])
summary(poisson.hurdle.mdl2)
zip.models <- list(poisson.zif.mdl1,poisson.zif.mdl2)
zip.equations <- sapply(zip.models,function(x) getequation("TARGET",x,rounding = 2))
zip.summary <- cbind(model = zip.equations,rbind(glance.poisson.zif.mdl1,glance.poisson.zif.mdl2))
pander::pandoc.table(zip.summary,style = "grid",digits = 2,caption = "ZIP fit summary")
nb.mdl1 <- MASS::glm.nb(formula = TARGET ~ STARS + LabelAppeal, data = train)
summary(nb.mdl1)
par(mfrow= c(2,2))
plot(nb.mdl1, col = train$TARGET0)
drop1(nb.mdl1, test = "Chisq")
nb.predict.mdl1 <- predict(nb.mdl1,newdata = test,type = "response")
MAE.nb.mdl1 <- mean(abs(test$TARGET - nb.predict.mdl1),na.rm = T)
glance.nb.mdl1 <- broom::glance(nb.mdl1)
glance.nb.mdl1$MAE <- MAE.nb.mdl1
knitr::kable(glance.nb.mdl1, caption = "negative binomial model",digits = 2)
zinb.mdl1 <- pscl::zeroinfl(TARGET ~ LabelAppeal+ STARS|STARS , data = train, dist = "negbin",EM = T)
summary(zinb.mdl1)
par(mfrow = c(1,2))
plot(zinb.mdl1$model$TARGET,round(zinb.mdl1$model$TARGET-zinb.mdl1$fitted.values,0), xlab = "TARGET", ylab = "Rounded residuals")
hist(round(zinb.mdl1$model$TARGET-zinb.mdl1$fitted.values,0),xlab = "Rounded residuals", main = "Histogram of residuals (rounded)")
predict.zinb.mdl1 <- predict(zinb.mdl1,newdata = test, type = "response")
MAE.zinb.mdl1 <- mean(abs(test$TARGET - predict.zinb.mdl1),na.rm = T)
zinb.equation <- getequation("TARGET",zinb.mdl1)
glance.zinb.mdl1 <- data.frame(LogLik = logLik(zinb.mdl1),AIC = AIC(zinb.mdl1), BIC = BIC(zinb.mdl1), MAE = MAE.zinb.mdl1)
zinb.summary <- cbind(model = zinb.equation,glance.zinb.mdl1)
pander::pandoc.table(zinb.summary, caption = "Zero inflated negative binomial model", digits = 2, style = "grid")
lm.mdl1 <- lm(TARGET ~ STARS + LabelAppeal, data = train)
summary(lm.mdl1)
drop1(lm.mdl1, test = "F")
par(mfrow = c(2,2))
plot(lm.mdl1)
predict.lm.mdl1 <- predict(lm.mdl1, newdata = test)
MAE.lm.mdl1 <- mean(abs(predict.lm.mdl1 - test$TARGET), na.rm = T)
glance.lm.mdl1 <- broom::glance(lm.mdl1)
lm.equation <- getequation("TARGET",lm.mdl1)
glance.lm.mdl1$MAE <- MAE.lm.mdl1
summary.lm.mdl1 <- cbind(model = lm.equation, glance.lm.mdl1)
winedata.test <- read.csv("wine_test.csv")
winedata.test.clean <- winedata.test[,-2]
winedata.test.clean <- VIM::kNN(winedata.test.clean)
TARGET <- round(predict(poisson.zif.mdl1, newdata = winedata.test.clean, type = "response"),0)
hist(TARGET)
mean(TARGET)
TARGET <- round(predict(poisson.zif.mdl2, newdata = winedata.test.clean, type = "response"),0)
hist(TARGET)
mean(TARGET)
winedata.test.clean <- winedata.test[,-2]
winedata.test.clean <- VIM::kNN(winedata.test.clean)
TARGET <- round(predict(poisson.zif.mdl2, newdata = winedata.test.clean, type = "response"),0)
TARGET <- round(predict(poisson.zif.mdl1, newdata = winedata.test.clean, type = "response"),0)
hist(TARGET)
eta <- 11.5 - 13.13 * winedata.test.clean$STARS
prob.no.sale <- (1 + exp(-1*eta))^-1
prob.sale <- 1 - prob.no.sale
plot(prob.sale)
predictedcounts <- round(exp(1.08 + 0.21* winedata.test.clean$LabelAppeal + 0.12 * winedata.test.clean$STARS) *  prob.sale,0)
hist(predictedcounts)
winedata.test$TARGET <- predictedcounts
write.csv(file = "wine_test_SESHADRI.csv",winedata.test[,c("INDEX","TARGET")])
mean(TARGET)
install.packages("missForest")
winedata.test.Imp <- missForest::missForest(winedata.test[,-2])
winedata.test.clean <- winedata.test.Imp
TARGET <- round(predict(poisson.zif.mdl1, newdata = winedata.test.clean, type = "response"),0)
hist(TARGET)
View(winedata.test.clean)
as.data.frame(winedata.test.clean)
summary(winedata.test.clean$ximp$STARS)
length(winedata.test.clean$ximp$STARS)
winedata.test.clean <- winedata.test.Imp$ximp
TARGET <- round(predict(poisson.zif.mdl1, newdata = winedata.test.clean, type = "response"),0)
hist(TARGET)
mean(TARGET)
exp(0.255)
exp(1.01)
exp(1.3)
round(exp(1.08 + 0.255),0)
exp(0.67)
exp(0,35)
exp(0.35)
round(exp(0.35),0)
round(exp(1.6),0)
source('~/Documents/MSPA/PREDICT 411/RegressionGLM/Unit3_DeploymentCode_Seshadri.R')
source('~/Documents/MSPA/PREDICT 411/RegressionGLM/Unit3_DeploymentCode_Seshadri.R')
mean(predictedcounts)
