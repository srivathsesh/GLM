factorcols <- sapply(df.rev.cleaned,is.factor)
dummyvars <- dummy::dummy(df.rev.cleaned[,factorcols],int = T)
df.rev.cleaned <- cbind(df.rev.cleaned,dummyvars)
#df.rev.cleaned.comp <- df.rev.cleaned[complete.cases(df.rev.cleaned), c(- 1,-7,-23:-27)]
library(forcats)
library(ggplot2)
ggplot(data = df.rev.cleaned[!is.na(df.rev.cleaned$INCOME),], mapping = aes(x = fct_reorder(JOB,INCOME), y = INCOME,color = JOB)) + geom_boxplot() + coord_flip() + theme_bw() + xlab("JOB") + geom_vline(xintercept = 4.5,linetype = "dashed", color = "red") + theme(legend.position = "none")
df.rev.cleaned <- df.rev.cleaned %>% dplyr::mutate(JOB.category = ifelse(JOB %in% c("Student", "Home Maker", "Clerical", "z_Blue_Collar"),0,1))
corcols <- sapply(df.rev.cleaned,is.numeric)
corcols[grep("_Missing",colnames(df.rev.cleaned))] <- F
cordata <- cor(df.rev.cleaned[complete.cases(df.rev.cleaned), corcols])
corrplot::corrplot(cordata,tl.cex = 0.6)
set.seed(10)
df.rev.cleaned$TARGET_FLAG2 <- ifelse(df.rev.cleaned$TARGET_FLAG==1,"Yes", "No")
trainRows <- caret::createDataPartition(df.rev.cleaned$TARGET_FLAG2,p = 0.8, list = F)
training <- df.rev.cleaned[trainRows,]
test <- df.rev.cleaned[-trainRows,]
# tr <- tree::tree(TARGET_FLAG2 ~. - TARGET_FLAG, data = training)
# summary(tr)
# cv.tr <- cv.tree(tr,FUN = prune.misclass,K = 100)
# library(tree)
# plot(prune.misclass(cv.tr,best = 5))
# text(prune.misclass(cv.tr,best = 5),pretty = 0)
tr2 <- rpart::rpart(TARGET_FLAG2 ~. - TARGET_FLAG, data = training,parms = list(split = 'Gini'))
#summary(tr2)
plot(tr2)
text(tr2, use.n = TRUE,cex = 0.5,pretty = 0)
tr.bagged <- randomForest::randomForest(as.factor(TARGET_FLAG2) ~ . - TARGET_FLAG, data = training,na.action=na.omit,mtry = 28)
tr.bagged
randomForest::varImpPlot(tr.bagged, cex = 0.7, main = "Variable Importance")
abline(v=60, col= 'red',lty = 2)
library(pROC)
training$predicted.class <- predict(tr.bagged, newdata = training,type = 'response')
training$predicted.prob <- predict(tr.bagged, newdata = training, type = 'prob') [,"Yes"]
rocCurve.training <- roc(response = training$TARGET_FLAG, predictor = training$predicted.prob)
test$predicted.class <- predict(tr.bagged,newdata = test,type = 'response')
test$predicted.prob <- predict(tr.bagged,newdata = test,type = 'prob')[,"Yes"]
#test$predicted <- ifelse(test$predicted == "Yes", 1,0)
#test$TARGET_FLAG2 <- ifelse(test$TARGET_FLAG2 == "Yes",1,0)
rocCurve.test <- roc(response = test$TARGET_FLAG , predictor = test$predicted.prob)
plot(rocCurve.test, legacy.axes = T,asp = NA, col = 'red', main = "ROC of hold out test set")
text(0.2,0.8,paste("AUC.test:",round(pROC::auc(rocCurve.test),2)),col = 'blue')
# plot(rocCurve.training, legacy.axes = T, asp = NA, add = T)
# text(0.2,0.7,paste("AUC.train:",round(pROC::auc(rocCurve.training),2)))
library(glmnet)
train.factorcols <- sapply(training,is.factor)
traincols <- colnames(training)[!train.factorcols]
traincols <- traincols[which(traincols %in% c("TARGET_FLAG2", "predicted.prob"))*-1]
training.glmnet <- training[complete.cases(training),traincols]
test.glmnet <- test[complete.cases(test),traincols]
glmnet.x <- model.matrix(TARGET_FLAG ~. , data = training.glmnet)[,-1]
glmnet.y <- as.matrix(training.glmnet$TARGET_FLAG)
# cross validation to choose lambda
gplmnet.model <- cv.glmnet(x = glmnet.x, y = glmnet.y[!is.na(glmnet.y)], family = 'binomial',lambda = 10^seq(10,-2,length = 100),alpha = 1)
glmnet.model <- glmnet(x = glmnet.x, y = glmnet.y[!is.na(glmnet.y)], family = 'binomial',lambda = gplmnet.model$lambda.min,alpha = 1)
# feature selection
colidx <- predict(glmnet.model,  type = "coefficients", s = gplmnet.model$lambda.min)
features <- data.frame(features = rownames(colidx), coefs = colidx[1:length(colidx)]) %>% mutate(abscoef = abs(coefs))
ggplot(data = features, mapping = aes(y = abscoef, x = fct_reorder(features,abscoef))) + geom_point() + coord_flip() + theme_bw() + theme(axis.text.y = element_text(size = 6)) + geom_vline(xintercept = 44.5,linetype = "dashed", color = "red") + theme(legend.position = "none") + xlab("Features") + ylab("Absolute Coefficients")
glmnet.x.test <- model.matrix(TARGET_FLAG ~. , data = test.glmnet)[,-1]
glmnet.y.test= test.glmnet$TARGET_FLAG
glmnet.test <- predict(glmnet.model, newx = glmnet.x.test, family = 'binomial',type = 'response')
rocCurve.lasso.test <- roc(response = glmnet.y.test[!is.na(glmnet.y.test)], predictor = glmnet.test)
# ROC Curves for Train and Test samples
train.prob <- predict(glmnet.model,type = "response",s = gplmnet.model$lambda.min,newx = glmnet.x)
train.class <- ifelse(train.prob >= 0.5, 1, 0)
rocCurve.lasso.train <- roc(response = glmnet.y, predictor = predict(glmnet.model,type = "response",s = gplmnet.model$lambda.min,newx = glmnet.x))
# Overlaying ROC curves for train and test samples
plot(rocCurve.lasso.test,asp = NA,legacy.axes = T, col = 'red')
text(0.2,0.7,paste("Test AUC:", round(pROC::auc(rocCurve.lasso.test),2)),col = 'red')
plot(rocCurve.lasso.train,asp = NA,legacy.axes = T, col = 'blue',add = T)
text(0.2,0.6,paste("Train AUC:", round(pROC::auc(rocCurve.lasso.train),2)),col = 'blue')
# Get optimal cutoff from training
lassostats <- data.frame(Threshold = rocCurve.lasso.train$thresholds, TPR = rocCurve.lasso.train$sensitivities , FPR = 1 - rocCurve.lasso.train$specificities)
optimalThd <- lassostats %>% dplyr::arrange(desc(TPR), FPR) %>% filter(FPR < 0.2) %>% head(1)
# Confusion matrix train and test
predict.test.class <- ifelse(glmnet.test >= optimalThd[,1] ,1, 0)
confusionMatrix.test <- table(glmnet.y.test,predict.test.class)
miss.class.test <- 1 - sum(diag(confusionMatrix.test))/sum(confusionMatrix.test)
knitr::kable(confusionMatrix.test)
predict.train.class <- ifelse(train.prob >= optimalThd[,1] ,1, 0)
confusionMatrix.train <- table(glmnet.y,predict.train.class)
miss.class <- 1 - sum(diag(confusionMatrix.train))/sum(confusionMatrix.train)
gainstbl.lasso.train <- gains::gains(actual = glmnet.y,predicted = train.prob)
good.train <- ceiling(gainstbl.lasso.train$obs*gainstbl.lasso.train$mean.resp)
bad.train <- gainstbl.lasso.train$obs - good.train
KS.lasso.train <- round(max(gainstbl.lasso.train$cume.pct.of.total - cumsum(bad.train/sum(bad.train))),1)
gainstbl.lasso.test <- gains::gains(actual = glmnet.y.test,predicted = glmnet.test)
good.test <- ceiling(gainstbl.lasso.test$obs*gainstbl.lasso.test$mean.resp)
bad.test <- gainstbl.lasso.test$obs - good.test
KS.lasso.test <- round(max(gainstbl.lasso.test$cume.pct.of.total - cumsum(bad.test/sum(bad.test))),1)
colidx
ggplot(data = features, mapping = aes(y = abscoef, x = fct_reorder(features,abscoef))) + geom_point() + coord_flip() + theme_bw() + theme(axis.text.y = element_text(size = 6)) + geom_vline(xintercept = 44.5,linetype = "dashed", color = "red") + theme(legend.position = "none") + xlab("Features") + ylab("Absolute Coefficients")
colidx
ggplot(data = features, mapping = aes(y = abscoef, x = fct_reorder(features,abscoef))) + geom_point() + coord_flip() + theme_bw() + theme(axis.text.y = element_text(size = 6)) + geom_vline(xintercept = 44.5,linetype = "dashed", color = "red") + theme(legend.position = "none") + xlab("Features") + ylab("Absolute Coefficients")
colidx
ggplot(data = features, mapping = aes(y = abscoef, x = fct_reorder(features,abscoef))) + geom_point() + coord_flip() + theme_bw() + theme(axis.text.y = element_text(size = 6)) + geom_vline(xintercept = 44.5,linetype = "dashed", color = "red") + theme(legend.position = "none") + xlab("Features") + ylab("Absolute Coefficients")
miss.class
confusionMatrix.train
optimalThd[,1]
miss.class
confusionMatrix.train
predict.train.class <- ifelse(train.prob >= 0.5 ,1, 0)
confusionMatrix.train <- table(glmnet.y,predict.train.class)
confusionMatrix.train
confusionMatrix.test
predict.test.class <- ifelse(glmnet.test >= 0.5 ,1, 0)
confusionMatrix.test <- table(glmnet.y.test,predict.test.class)
confusionMatrix.test
miss.class.test <- 1 - sum(diag(confusionMatrix.test))/sum(confusionMatrix.test)
miss.class.test
predict.test.class <- ifelse(glmnet.test >= optimalThd[,1] ,1, 0)
confusionMatrix.test <- table(glmnet.y.test,predict.test.class)
miss.class.test <- 1 - sum(diag(confusionMatrix.test))/sum(confusionMatrix.test)
miss.class.test
confusionMatrix.test
predict.test.class <- ifelse(glmnet.test >= 0.5 ,1, 0)
confusionMatrix.test <- table(glmnet.y.test,predict.test.class)
miss.class.test <- 1 - sum(diag(confusionMatrix.test))/sum(confusionMatrix.test)
miss.class.test
confusionMatrix.test
plot(rocCurve.lasso.test,asp = NA,legacy.axes = T, col = 'red')
text(0.2,0.7,paste("Test AUC:", round(pROC::auc(rocCurve.lasso.test),2)),col = 'red')
plot(rocCurve.lasso.train,asp = NA,legacy.axes = T, col = 'blue',add = T)
text(0.2,0.6,paste("Train AUC:", round(pROC::auc(rocCurve.lasso.train),2)),col = 'blue')
KS.lasso.test
gainstbl.lasso.test
KS.lasso.test <- round(max(gainstbl.lasso.test$cume.pct.of.total - cumsum(bad.test/sum(bad.test))),1)
KS.lasso.test
as.matrix(gainstbl.lasso.test)
plot(x=gainstbl.lasso.test$depth, y = gainstbl.lasso.test$cume.mean.resp)
plot(x=gainstbl.lasso.test$depth, y = gainstbl.lasso.test$cume.pct.of.total)
matgain <- as.matrix(gainstbl.lasso.test$depth, gainstbl.lasso.test$cume.pct.of.total, seq(0.1:1,0.1))
matgain
head(matgain)
View(matgain)
matgain <- cbind(gainstbl.lasso.test$depth, gainstbl.lasso.test$cume.pct.of.total, seq(0.1:1,0.1))
head(matgain)
0.1:1
seq(0.1,1, length.out = 10)
matgain <- cbind(gainstbl.lasso.test$depth, gainstbl.lasso.test$cume.pct.of.total, seq(0.1:1,0.1,length.out = 10))
matgain
matgain <- cbind(gainstbl.lasso.test$depth, gainstbl.lasso.test$cume.pct.of.total, seq(0.1,1,length.out = 10))
matgain
matplot(matgain[,2:3])
matplot(matgain[,2:3],type = "l")
matplot(matgain.test, type = c("b","l"))
matgain.test <- cbind(gainstbl.lasso.test$cume.pct.of.total, seq(0.1,1,length.out = 10))
matplot(matgain.test, type = c("b","l"))
matplot(matgain.test, type = c("p","l"))
matplot(matgain.test, type = c("p","l"),pch = 1)
matplot(matgain.test, type = c("l"),pch = 1)
matplot(matgain.test, type = c("l","p"),pch = 1)
matplot(matgain.test, type = "o",pch = 1)
matplot(matgain.test, type = "o",pch = 1, xlab = "Lift")
matplot(matgain.test, type = "o",pch = 1, ylab = "Lift", xlab = "Bins")
matgain.train <- cbind(gainstbl.lasso.train$cume.pct.of.total, seq(0.1,1,length.out = 10))
par(c(1,2))
matplot(matgain.train, type = "o",pch = 1, ylab = "Lift", xlab = "Bins")
matplot(matgain.test, type = "o",pch = 1, ylab = "Lift", xlab = "Bins")
par(mfrow = c(2,1))
matplot(matgain.train, type = "o",pch = 1, ylab = "Lift", xlab = "Bins")
matplot(matgain.test, type = "o",pch = 1, ylab = "Lift", xlab = "Bins")
par(mfrow = c(1,2))
matplot(matgain.train, type = "o",pch = 1, ylab = "Lift", xlab = "Bins")
matplot(matgain.test, type = "o",pch = 1, ylab = "Lift", xlab = "Bins")
par(mfrow = c(1,2))
matplot(matgain.train, type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set")
matplot(matgain.test, type = "o",pch = 1, ylab = "Lift", xlab = "Bins", main = "Lift - Hold out test")
par(mfrow = c(1,2))
matplot(matgain.train, type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set")
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"))
matplot(matgain.test, type = "o",pch = 1, ylab = "Lift", xlab = "Bins", main = "Lift - Hold out test")
par(mfrow = c(1,2))
matplot(matgain.train, type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set")
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"))
matplot(matgain.test, type = "o",pch = 1, ylab = "Lift", xlab = "Bins", main = "Lift - Hold out test")
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"))
par(mfrow = c(1,2))
matplot(matgain.train, type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set")
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"))
matplot(matgain.test, type = "o",pch = 1, ylab = "Lift", xlab = "Bins", main = "Lift - Hold out test")
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"),l=1:2)
par(mfrow = c(1,2))
matplot(matgain.train, type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set")
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"))
matplot(matgain.test, type = "o",pch = 1, ylab = "Lift", xlab = "Bins", main = "Lift - Hold out test")
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"),lty = 1:2)
par(mfrow = c(1,2))
matplot(matgain.train, type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set")
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"),lty = 1:2)
matplot(matgain.test, type = "o",pch = 1, ylab = "Lift", xlab = "Bins", main = "Lift - Hold out test")
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"),lty = 1:2)
par(mfrow = c(1,2))
matplot(matgain.train, type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set")
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"),lty = 1:2)
matplot(matgain.test, type = "o",pch = 1, ylab = "Lift", xlab = "Bins", main = "Lift - Hold out test")
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"),lty = 1:2,cex = 0.4)
par(mfrow = c(1,2))
matplot(matgain.train, type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set")
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"),lty = 1:2,cex = 0.7)
matplot(matgain.test, type = "o",pch = 1, ylab = "Lift", xlab = "Bins", main = "Lift - Hold out test")
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"),lty = 1:2,cex = 0.7)
par(mfrow = c(1,2))
matplot(matgain.train, type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set",cex.main = 0.7)
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"),lty = 1:2,cex = 0.7)
matplot(matgain.test, type = "o",pch = 1, ylab = "Lift", xlab = "Bins", main = "Lift - Hold out test")
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"),lty = 1:2,cex = 0.7)
matplot(matgain.train, type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set",cex.main = 0.9)
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"),lty = 1:2,cex = 0.7)
matplot(matgain.test, type = "o",pch = 1, ylab = "Lift", xlab = "Bins", main = "Lift - Hold out test")
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"),lty = 1:2,cex = 0.7)
matplot(matgain.train, type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set",cex.main = 0.9,cex.lab = 0.5)
matplot(matgain.train, type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set",cex.main = 0.9,cex.lab = 0.7)
par(mfrow = c(1,2))
matplot(matgain.train, type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set",cex.main = 0.9,cex.lab = 0.7)
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"),lty = 1:2,cex = 0.7,cex.main = 0.9,cex.lab = 0.7)
par(mfrow = c(1,2))
matplot(matgain.train, type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set",cex.main = 0.9,cex.lab = 0.7)
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"),lty = 1:2,cex = 0.7)
matplot(matgain.test, type = "o",pch = 1, ylab = "Lift", xlab = "Bins", main = "Lift - Hold out test",cex.main = 0.9,cex.lab = 0.7)
legend("bottomright",pch = 1, col = 1:2,legend = c("Lasso", "Random"),lty = 1:2,cex = 0.7)
geom_freqpoly(mtcars$mpg)
ggplot(data = mtcars, mapping = aes(x = mpg)) + geom_freqpoly()
ggplot(data = mtcars, mapping = aes(x = mpg)) + geom_histogram(gformula = 'density')
ggplot(data = mtcars, mapping = aes(x = mpg)) + geom_histogram(stat  = 'density')
ggplot(data = mtcars, mapping = aes(x = mpg)) + geom_histogram(stat = 'density', bins = 15)
ggplot(data = mtcars, mapping = aes(x = mpg)) + geom_histogram()
ggplot(data = mtcars, mapping = aes(x = mpg)) + geom_histogram(stat='density')
ggplot(data = mtcars, mapping = aes(x = mpg)) + geom_histogram(y = .density)
ggplot(data = mtcars, mapping = aes(x = mpg)) + geom_histogram(y = ..density)
ggplot(data = mtcars, mapping = aes(x = mpg, y = ..density..)) + geom_histogram()
matplot(cbind(matgain.train,matgain.test[,2]), type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set",cex.main = 0.9,cex.lab = 0.7)
matplot(cbind(matgain.train,matgain.test[,2]))
matgain.test
matplot(cbind(matgain.train,matgain.test[,1]))
matplot(cbind(matgain.train,matgain.test[,1]), type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set",cex.main = 0.9,cex.lab = 0.7)
matplot(cbind(matgain.train,matgain.test[,1]), type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set",cex.main = 0.9,cex.lab = 0.7)
matplot(cbind(matgain.train,matgain.test[,1]), type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set",cex.main = 0.9,cex.lab = 0.7)
legend("bottomright",pch = 1, col = 1:2,legend = c("Training", "Random", "Test"),lty = 1:3,cex = 0.7)
matplot(cbind(matgain.train,matgain.test[,1]), type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set",cex.main = 0.9,cex.lab = 0.7)
legend("bottomright",pch = 1, col = 1:2,legend = c("Training", "Random", "Test"),lty = 1:3,cex = 0.7)
matplot(cbind(matgain.train,matgain.test[,1]), type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Training Set",cex.main = 0.9,cex.lab = 0.7)
legend("bottomright",pch = 1, col = 1:3,legend = c("Training", "Random", "Test"),lty = 1:3,cex = 0.7)
ggplot(data = mtcars, mapping = aes(x = mpg, y = ..density..,color = disp)) + geom_histogram()
ggplot(data = mtcars, mapping = aes(x = mpg,color = disp)) + geom_density()
ggplot(data = mtcars, mapping = aes(x = mpg,group = disp)) + geom_density()
ggplot(data = mtcars, mapping = aes(x = mpg,color = disp, fill = disp)) + geom_density(alpha = 0.5)
mtcars$disp
mtcars$cyl
ggplot(data = mtcars, mapping = aes(x = mpg,color = cyl, fill = cyl)) + geom_density(alpha = 0.5)
ggplot(data = mtcars, mapping = aes(x = mpg,color = cyl, fill = cyl)) + geom_histogram() + geom_density(alpha = 0.5)
matplot(ks.test,tupe = "o", pch = 1 )
matplot(ks.test,type = "o", pch = 1 )
ks.test <- cbind(good.test,bad.test)
matplot(ks.test,type = "o", pch = 1 )
gainstbl.lasso.test <- gains::gains(actual = glmnet.y.test,predicted = glmnet.test)
good.test <- ceiling(gainstbl.lasso.test$obs*gainstbl.lasso.test$mean.resp)
bad.test <- gainstbl.lasso.test$obs - good.test
KS.lasso.test <- round(max(gainstbl.lasso.test$cume.pct.of.total - cumsum(bad.test/sum(bad.test))),1)
matgain.test <- cbind(gainstbl.lasso.test$cume.pct.of.total, seq(0.1,1,length.out = 10))
ks.test <- cbind(good.test,bad.test)
matplot(ks.test,type = "o", pch = 1 )
ks.test <- cbind(gainstbl.lasso.test$cume.pct.of.total,bad.test,cumsum(bad.test/sum(bad.test)))
matplot(ks.test,type = "o", pch = 1 )
bad.test <- gainstbl.lasso.test$obs - good.test
KS.lasso.test <- round(max(gainstbl.lasso.test$cume.pct.of.total - cumsum(bad.test/sum(bad.test))),1)
matgain.test <- cbind(gainstbl.lasso.test$cume.pct.of.total, seq(0.1,1,length.out = 10))
ks.test <- cbind(gainstbl.lasso.test$cume.pct.of.total,bad.test,cumsum(bad.test/sum(bad.test)))
matplot(ks.test,type = "o", pch = 1 )
gainstbl.lasso.test$cume.pct.of.total
ks.test <- cbind(gainstbl.lasso.test$cume.pct.of.total,cumsum(bad.test/sum(bad.test)))
matplot(ks.test,type = "o", pch = 1 )
train.prob
matplot(cbind(matgain.train,matgain.test[,1]), type = "o",pch = 1, ylab = "Lift", xlab = "Bins",main = "Lift - Lasso",cex.main = 0.9,cex.lab = 0.7)
matplot(cbind(matgain.train,matgain.test[,1]), type = "o",pch = 1, ylab = "Cum % Crash", xlab = "Bins",main = "Gains - Lasso",cex.main = 0.9,cex.lab = 0.7)
gainstbl.lasso.test
plot(gainstbl.lasso.test)
glmnet.test
probdesc <- glmnet.test[order(glmnet.test,decreasing = T)]
plot(probdesc)
128*5 + 129*5
length(probdesc)
obs1 <- length(which(probdesc[1:128] >= 0.5))
obs1
which(probdesc[1:128] >= 0.5)
mean(probdesc[1:128])
sum(glmnet.y.test[1:128])
37/128
1-37/128
probasc <- glmnet.test[order(glmnet.test,decreasing = F)]
obs2 <- length(which(probdasc[1:128] >= 0.5))
obs2 <- length(which(probasc[1:128] >= 0.5))
obs2
obs2 <- length(which(glmnet.test >= 0.5))
obs2
160/128
obs2 <- length(which(glmnet.test[1:128] >= 0.5))
obs2
17/128
1-17/128
mean(probdesc[1:128])
mean(glmnet.y.test[1:128])
caret::lift(x = glmnet.y.test ~ glmnet.test)
caret::lift(glmnet.y.test ~ glmnet.test)
caret::lift(as.factor(glmnet.y.test) ~ glmnet.test)
hmm <- caret::lift(as.factor(glmnet.y.test) ~ glmnet.test)
hmm
xyplot(hmm)
hmm <- caret::lift(as.factor(glmnet.y) ~ train.prob)
xyplot(hmm)
matplot(ks.test,type = "o", pch = 1 )
ks.test <- cbind(gainstbl.lasso.test$cume.pct.of.total,cumsum(bad.test/sum(bad.test)))
matplot(ks.test,type = "o", pch = 1 )
logLik(glmnet.model)
View(df)
KS.test <- cbind(gainstbl.lasso.test$cume.pct.of.total,cumsum(bad.test/sum(bad.test)))
rm(ks.test)
ks.test(train.prob,glmnet.y)
ks.test(train.prob,glmnet.y)$statistic
glmnet.x.test <- model.matrix(TARGET_FLAG ~. , data = test.glmnet)[,-1]
glmnet.y.test= test.glmnet$TARGET_FLAG
glmnet.test <- predict(glmnet.model, newx = glmnet.x.test, family = 'binomial',type = 'response')
rocCurve.lasso.test <- roc(response = glmnet.y.test[!is.na(glmnet.y.test)], predictor = glmnet.test)
train.prob <- predict(glmnet.model,type = "response",s = gplmnet.model$lambda.min,newx = glmnet.x)
train.class <- ifelse(train.prob >= 0.5, 1, 0)
rocCurve.lasso.train <- roc(response = glmnet.y, predictor = predict(glmnet.model,type = "response",s = gplmnet.model$lambda.min,newx = glmnet.x))
plot(rocCurve.lasso.test,asp = NA,legacy.axes = T, col = 'red')
text(0.2,0.7,paste("Test AUC:", round(pROC::auc(rocCurve.lasso.test),2)),col = 'red')
plot(rocCurve.lasso.train,asp = NA,legacy.axes = T, col = 'blue',add = T)
plot(rocCurve.lasso.test,asp = NA,legacy.axes = T, col = 'red')
text(0.2,0.7,paste("Test AUC:", round(pROC::auc(rocCurve.lasso.test),2)),col = 'red')
plot(rocCurve.lasso.train,asp = NA,legacy.axes = T, col = 'blue',add = T)
text(0.2,0.6,paste("Train AUC:", round(pROC::auc(rocCurve.lasso.train),2)),col = 'blue')
lassostats <- data.frame(Threshold = rocCurve.lasso.train$thresholds, TPR = rocCurve.lasso.train$sensitivities , FPR = 1 - rocCurve.lasso.train$specificities)
optimalThd <- lassostats %>% dplyr::arrange(desc(TPR), FPR) %>% filter(FPR < 0.2) %>% head(1)
predict.test.class <- ifelse(glmnet.test >= 0.5 ,1, 0)
confusionMatrix.test <- table(glmnet.y.test,predict.test.class)
miss.class.test <- 1 - sum(diag(confusionMatrix.test))/sum(confusionMatrix.test)
knitr::kable(confusionMatrix.test)
predict.train.class <- ifelse(train.prob >= optimalThd[,1] ,1, 0)
confusionMatrix.train <- table(glmnet.y,predict.train.class)
miss.class <- 1 - sum(diag(confusionMatrix.train))/sum(confusionMatrix.train)
gainstbl.lasso.train <- gains::gains(actual = glmnet.y,predicted = train.prob)
good.train <- ceiling(gainstbl.lasso.train$obs*gainstbl.lasso.train$mean.resp)
bad.train <- gainstbl.lasso.train$obs - good.train
KS.lasso.train <- round(max(gainstbl.lasso.train$cume.pct.of.total - cumsum(bad.train/sum(bad.train))),1)
matgain.train <- cbind(gainstbl.lasso.train$cume.pct.of.total, seq(0.1,1,length.out = 10))
gainstbl.lasso.test <- gains::gains(actual = glmnet.y.test,predicted = glmnet.test)
good.test <- ceiling(gainstbl.lasso.test$obs*gainstbl.lasso.test$mean.resp)
bad.test <- gainstbl.lasso.test$obs - good.test
KS.lasso.test <- round(max(gainstbl.lasso.test$cume.pct.of.total - cumsum(bad.test/sum(bad.test))),1)
matgain.test <- cbind(gainstbl.lasso.test$cume.pct.of.total, seq(0.1,1,length.out = 10))
matplot(cbind(matgain.train,matgain.test[,1]), type = "o",pch = 1, ylab = "Cum % Crash", xlab = "Bins",main = "Gains - Lasso",cex.main = 0.9,cex.lab = 0.7)
legend("bottomright",pch = 1, col = 1:3,legend = c("Training", "Random", "Test"),lty = 1:3,cex = 0.7)
matplot(cbind(matgain.train,matgain.test[,1]), type = "o",pch = 1, ylab = "Cum % Crash", xlab = "Bins",main = "Gains - Lasso",cex.main = 0.9,cex.lab = 0.7)
legend("bottomright",pch = 1, col = 1:3,legend = c("Training", "Random", "Test"),lty = 1:3,cex = 0.7)
KS.test <- cbind(gainstbl.lasso.test$cume.pct.of.total,cumsum(bad.test/sum(bad.test)))
matplot(ks.test,type = "o", pch = 1 )
p <- ggplot(data = df.rev.cleaned)
caragehist <- p + geom_density(mapping = aes(x = CAR_AGE, color = JOB, fill = JOB),alpha = 0.25)
caragehist
p <- ggplot(data = df.rev.cleaned)
caragehist <- p + geom_density(mapping = aes(x = CAR_AGE, color = JOB, fill = JOB),alpha = 0.25) + theme_classic()
caragehist
caragebox <- p + geom_boxplot(mapping = aes(y = CAR_AGE, x = JOB, color = JOB, fill = JOB),alpha = 0.25) + theme_classic() + theme(legend.position = "none")
careagebox
caragebox
caragebox <- p + geom_boxplot(mapping = aes(y = CAR_AGE, x = JOB, color = JOB, fill = JOB),alpha = 0.25) + theme_classic() + theme(legend.position = "none") + coord_flip()
caragebox
caragebox <- p + geom_boxplot(mapping = aes(y = CAR_AGE, x = fct_reorder(JOB,CAR_AGE), color = JOB, fill = JOB),alpha = 0.25) + theme_classic() + theme(legend.position = "none") + coord_flip()
caragebox
p <- ggplot(data = df.rev.cleaned[!is.na(df.rev.cleaned$CAR_AGE),])
caragebox <- p + geom_boxplot(mapping = aes(y = CAR_AGE, x = fct_reorder(JOB,CAR_AGE), color = JOB, fill = JOB),alpha = 0.25) + theme_classic() + theme(legend.position = "none") + coord_flip()
caragebox
p + geom_boxplot(mapping = aes(y = CAR_AGE, x = fct_reorder(JOB,CAR_AGE), color = JOB, fill = JOB),alpha = 0.25) + theme_classic() + theme(legend.position = "none") + coord_flip() + xlab("JOB") + yllab("Age of cars") + geom_vline(xintercept = 5.5,linetype = "dashed", color = "red")
p + geom_boxplot(mapping = aes(y = CAR_AGE, x = fct_reorder(JOB,CAR_AGE), color = JOB, fill = JOB),alpha = 0.25) + theme_classic() + theme(legend.position = "none") + coord_flip() + xlab("JOB") + ylab("Age of cars") + geom_vline(xintercept = 5.5,linetype = "dashed", color = "red")
ggplot(data = df.rev.cleaned[!is.na(df.rev.cleaned$INCOME),], mapping = aes(x = fct_reorder(JOB,INCOME), y = INCOME,color = JOB)) + geom_boxplot() + coord_flip() + theme_bw() + xlab("JOB") + geom_hline(yintercept = 8,linetype = "dashed", color = "red") + theme(legend.position = "none")
p + geom_boxplot(mapping = aes(y = CAR_AGE, x = fct_reorder(JOB,CAR_AGE), color = JOB, fill = JOB),alpha = 0.25) + theme_classic() + theme(legend.position = "none") + coord_flip() + xlab("JOB") + ylab("Age of cars") + geom_hline(yintercept = 8,linetype = "dashed", color = "red")
p <- ggplot(data = df.rev.cleaned[!is.na(df.rev.cleaned$CAR_AGE),])
p + geom_histogram()
p + geom_histogram(x = CAR_AGE)
p <- ggplot(data = df.rev.cleaned[!is.na(df.rev.cleaned$CAR_AGE),])
p + geom_histogram(x = CAR_AGE)
p + geom_histogram(mapping = aes(x = CAR_AGE))
p <- ggplot(data = df.rev.cleaned[!is.na(df.rev.cleaned$CAR_AGE),])
p + geom_histogram(mapping = aes(x = CAR_AGE))
hist(df.rev.cleaned$CAR_AGE)
hist(df.rev.cleaned$CAR_AGE[!is.na(df.rev.cleaned$CAR_AGE)])
p <- ggplot(data = df.rev.cleaned[!is.na(df.rev.cleaned$CAR_AGE),])
p + geom_histogram(mapping = aes(x = CAR_AGE))
hist(df.rev.cleaned$CAR_AGE[!is.na(df.rev.cleaned$CAR_AGE)],breaks = 40)
df.rev.cleaned$CAR_AGE[df.rev.cleaned$CAR_AGE > 14 & df.rev.cleaned$CAR_AGE < 15]
plot(df.rev.cleaned$CAR_AGE[df.rev.cleaned$CAR_AGE > 14 & df.rev.cleaned$CAR_AGE < 15])
plot(df.rev.cleaned$CAR_AGE[df.rev.cleaned$CAR_AGE > 14 & df.rev.cleaned$CAR_AGE < 15 $ !is.na(df.rev.cleaned$CAR_AGE)])
plot(df.rev.cleaned$CAR_AGE[df.rev.cleaned$CAR_AGE > 14 & df.rev.cleaned$CAR_AGE < 15 & !is.na(df.rev.cleaned$CAR_AGE)])
length(df.rev.cleaned$CAR_AGE[df.rev.cleaned$CAR_AGE > 14 & df.rev.cleaned$CAR_AGE < 15 & !is.na(df.rev.cleaned$CAR_AGE)])
length(df.rev.cleaned$CAR_AGE[df.rev.cleaned$CAR_AGE > 1 & df.rev.cleaned$CAR_AGE < 5 & !is.na(df.rev.cleaned$CAR_AGE)])
p + geom_boxplot(mapping = aes(y = CAR_AGE, x = fct_reorder(JOB,CAR_AGE), color = JOB, fill = JOB),alpha = 0.25) + theme_classic() + theme(legend.position = "none") + coord_flip() + xlab("JOB") + ylab("Age of cars") + geom_hline(yintercept = 8,linetype = "dashed", color = "red")
p + geom_histogram(mapping = aes(x = CAR_AGE)) + theme_bw()
p + geom_boxplot(mapping = aes(y = CAR_AGE, x = fct_reorder(JOB,CAR_AGE), color = JOB, fill = JOB),alpha = 0.25) + theme_classic() + theme(legend.position = "none") + coord_flip() + xlab("JOB") + ylab("Age of cars") + geom_hline(yintercept = 8,linetype = "dashed", color = "red")
gridExtra::grid.arrange(caragehist,caragebox, ncol = 2)
library(forcats)
library(ggplot2)
p <- ggplot(data = df.rev.cleaned[!is.na(df.rev.cleaned$CAR_AGE),])
caragegist <- p + geom_histogram(mapping = aes(x = CAR_AGE)) + theme_bw()
caragebox <- p + geom_boxplot(mapping = aes(y = CAR_AGE, x = fct_reorder(JOB,CAR_AGE), color = JOB, fill = JOB),alpha = 0.25) + theme_classic() + theme(legend.position = "none") + coord_flip() + xlab("JOB") + ylab("Age of cars") + geom_hline(yintercept = 8,linetype = "dashed", color = "red")
gridExtra::grid.arrange(caragehist,caragebox, ncol = 2)
library(forcats)
library(ggplot2)
p <- ggplot(data = df.rev.cleaned[!is.na(df.rev.cleaned$CAR_AGE),])
caragehist <- p + geom_histogram(mapping = aes(x = CAR_AGE)) + theme_bw()
caragebox <- p + geom_boxplot(mapping = aes(y = CAR_AGE, x = fct_reorder(JOB,CAR_AGE), color = JOB, fill = JOB),alpha = 0.25) + theme_classic() + theme(legend.position = "none") + coord_flip() + xlab("JOB") + ylab("Age of cars") + geom_hline(yintercept = 8,linetype = "dashed", color = "red")
gridExtra::grid.arrange(caragehist,caragebox, ncol = 2)
library(forcats)
library(ggplot2)
p <- ggplot(data = df.rev.cleaned[!is.na(df.rev.cleaned$CAR_AGE),])
caragehist <- p + geom_histogram(mapping = aes(x = CAR_AGE)) + theme_bw() + xlab("Age of cars")
caragebox <- p + geom_boxplot(mapping = aes(y = CAR_AGE, x = fct_reorder(JOB,CAR_AGE), color = JOB, fill = JOB),alpha = 0.25) + theme_classic() + theme(legend.position = "none") + coord_flip() + xlab("JOB") + ylab("Age of cars") + geom_hline(yintercept = 8,linetype = "dashed", color = "red")
gridExtra::grid.arrange(caragehist,caragebox, ncol = 2)
ggplot(data = df.rev.cleaned[!is.na(df.rev.cleaned$INCOME),], mapping = aes(x = fct_reorder(JOB,INCOME), y = INCOME,color = JOB)) + geom_boxplot() + coord_flip() + theme_bw() + xlab("JOB") + geom_vline(xintercept = 4.5,linetype = "dashed", color = "red") + theme(legend.position = "none")
cp <- ggplot(data = df.rev.cleaned)
cp <- ggplot(data = df.rev.cleaned)
cpbar <- cp + geom_bar(JOB)
cpbar <- cp + geom_bar(mapping = aes(x = JOB))
cpbar
cpbar <- cp + geom_bar(mapping = aes(x = JOB)) + theme_classic()
cp + geom_bar(mapping = aes(x = JOB)) + theme_classic()
cpbar <- cp + geom_bar(mapping = aes(x = fct_reorder(JOB,count(JOB)))) + theme_classic()
cpbar
cpbar <- cp + geom_bar(mapping = aes(x = fct_reorder(JOB,length(JOB)))) + theme_classic()
cpbar
cpbar <- cp + geom_bar(mapping = aes(x = JOB)) + theme_classic() + scale_x_discrete(drop = FALSE)
cpbar
cpbar <- cp + geom_bar(mapping = aes(fct_infreq(JOB))) + theme_classic() + scale_x_discrete(drop = FALSE)
cpbar
cpbar <- cp + geom_bar(mapping = aes(fct_infreq(JOB))) + theme_classic() + scale_x_discrete(drop = FALSE) + xlab("JOB")
cpbar
cpbar <- cp + geom_bar(mapping = aes(fct_infreq(JOB))) + theme_classic() + scale_x_discrete(drop = FALSE) + xlab("JOB") + coord_flip()
cpbar
cpbar <- cp + geom_bar(mapping = aes(fct_rev(fct_infreq(JOB)))) + theme_classic() + scale_x_discrete(drop = FALSE) + xlab("JOB") + coord_flip()
cpbar
cp + geom_histogram(AGE)
cp + geom_histogram(aes(x = AGE))
piechart(df.rev.cleaned$TARGET_FLAG)
cp + geom_bin2d(mapping = aes(x = TARGET_FLAG))
cp + geom_bin2d(mapping = aes(y = TARGET_FLAG))
cpRisk <- cp + geom_bin2d(mapping = aes(x = levels(TARGET_FLAG), y = TARGET_FLAG))
cpRisk
cpRisk
cp + geom_bin2d(mapping = aes(x = levels(TARGET_FLAG), y = TARGET_FLAG))
cpRisk <- cp + geom_bin2d(mapping = aes(x = TARGET_FLAG, y = TARGET_FLAG))
cpRisk
cpRisk <- cp + geom_bar(aes(x=TARGET_FLAG))
cpRisk
cpRisk <- cp + geom_bar(aes(x=TARGET_FLAG)) + label_value(c("No Risk", "Risk"))
cpRisk <- cp + geom_bar(aes(x=TARGET_FLAG)) + theme(label_value(c("No Risk", "Risk")))
library(forcats)
library(ggplot2)
cp <- ggplot(data = df.rev.cleaned)
cpbar <- cp + geom_bar(mapping = aes(fct_rev(fct_infreq(JOB)))) + theme_classic() + scale_x_discrete(drop = FALSE) + xlab("JOB") + coord_flip()
cpage <- cp + geom_histogram(aes(x = AGE)) + theme_classic()
cpincome <- cp + geom_histogram(aes(x = INCOME)) + theme_classic()
cphomeval <- cp + geom_histogram(aes(x = HOME_VAL)) + theme_classic()
cpTIF <- cp + geom_histogram(aes(x = TIF)) + theme_classic() + xlab('Time in force')
cpRisk <- cp + geom_bar(aes(x=TARGET_FLAG)) + xlab("Risky - Yes (1) or No (0)")
gridExtra::grid.arrange(cpbar,cpage,cpincome,cohomeval,cpTIF,cpRisk, nrow = 2, ncol =3)
library(forcats)
library(ggplot2)
cp <- ggplot(data = df.rev.cleaned)
cpbar <- cp + geom_bar(mapping = aes(fct_rev(fct_infreq(JOB)))) + theme_classic() + scale_x_discrete(drop = FALSE) + xlab("JOB") + coord_flip()
cpage <- cp + geom_histogram(aes(x = AGE)) + theme_classic()
cpincome <- cp + geom_histogram(aes(x = INCOME)) + theme_classic()
cphomeval <- cp + geom_histogram(aes(x = HOME_VAL)) + theme_classic()
cpTIF <- cp + geom_histogram(aes(x = TIF)) + theme_classic() + xlab('Time in force')
cpRisk <- cp + geom_bar(aes(x=TARGET_FLAG)) + xlab("Risky - Yes (1) or No (0)")
gridExtra::grid.arrange(cpbar,cpage,cpincome,cphomeval,cpTIF,cpRisk, nrow = 2, ncol =3)
library(forcats)
library(ggplot2)
cp <- ggplot(data = df.rev.cleaned)
cpbar <- cp + geom_bar(mapping = aes(fct_rev(fct_infreq(JOB)))) + theme_classic() + scale_x_discrete(drop = FALSE) + xlab("JOB") + coord_flip()
cpage <- cp + geom_histogram(aes(x = AGE)) + theme_classic()
cpincome <- cp + geom_histogram(aes(x = INCOME)) + theme_classic()
cphomeval <- cp + geom_histogram(aes(x = HOME_VAL)) + theme_classic()
cpTIF <- cp + geom_histogram(aes(x = TIF)) + theme_classic() + xlab('Time in force')
cpRisk <- cp + geom_bar(aes(x=TARGET_FLAG)) + xlab("Risky - Yes (1) or No (0)") + theme_classic()
gridExtra::grid.arrange(cpbar,cpage,cpincome,cphomeval,cpTIF,cpRisk, nrow = 2, ncol =3)
df.rev.cleaned %>%
filter(!is.na(INCOME)) %>%
filter(JOB = " ") %>%
geom_histogram(aes(x = AGE))
df.rev.cleaned %>%
filter(!is.na(INCOME)) %>%
filter(JOB == " ") %>%
geom_histogram(aes(x = AGE))
hmm <- df.rev.cleaned %>%
filter(!is.na(INCOME)) %>%
filter(JOB == " ") %>%
select(JOB,AGE)
head(hmm)
hmm <- df.rev.cleaned %>%
filter(!is.na(INCOME)) %>%
filter(JOB == " ") %>%
select(JOB,AGE) %>%
mutate(AGE = ifelse(JOB == " ", "NA", JOB))
hmm
hmm <- df.rev.cleaned %>%
filter(!is.na(INCOME)) %>%
filter(JOB == " ") %>%
select(JOB,AGE) %>%
mutate(JOB = ifelse(JOB == " ", "NA", JOB))
hmm
