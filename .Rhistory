formula_pls <- as.character(formula(pls.lm.Fit))[3]
predictors_pls <- unlist(strsplit(formula_pls, split = "+",fixed = T))
coef.pls <- round(coefficients(pls.lm.Fit),2)
signs.pls <- ifelse(sign(coef.pls)==1,"+", "-")
Betas.pls <- paste(abs(coef.pls[2:length(coef.pls)]),"*",predictors_pls)
eqn.pls <- paste("TARGET_WINS =", paste(coef.pls[1],paste(paste(signs.pls[2:length(signs.pls)],Betas.pls),collapse = " ")))
plsdf <- data.frame(x,y)
# plsdf <- plsdf %>% dplyr::filter(Pitch_H_Outlier == F)
colnames(plsdf)[20] <- "TARGET_WINS"
pls.Fit <- pls::plsr(TARGET_WINS ~ ., data  = plsdf[,which(colnames(plsdf) %in% c("BatSO_Filter","PitSO_Filter"))*-1], scale = T, validation = "CV")
library(pls)
validationplot(pls.Fit)
#summary(pls.Fit)
library(caret)
# plot(varImp(pls.Fit),top = 10)
# plot(pls::R2(pls.Fit))
pls.df <- data.frame(pls.Fit$scores[,1:4],plsdf$TARGET_WINS)
colnames(pls.df)[5] <- "TARGET_WINS"
# test to make sure if the PLS does the OLS on the component scores
pls.lm.Fit <- lm(data = pls.df,formula = TARGET_WINS ~ ., )
formula_pls <- as.character(formula(pls.lm.Fit))[3]
predictors_pls <- unlist(strsplit(formula_pls, split = "+",fixed = T))
coef.pls <- round(coefficients(pls.lm.Fit),2)
signs.pls <- ifelse(sign(coef.pls)==1,"+", "-")
Betas.pls <- paste(abs(coef.pls[2:length(coef.pls)]),"*",predictors_pls)
eqn.pls <- paste("TARGET_WINS =", paste(coef.pls[1],paste(paste(signs.pls[2:length(signs.pls)],Betas.pls),collapse = " ")))
plot(pls.lm.Fit)
summary(pls.lm.Fit)
anova(pls.lm.Fit)
ImpVars <- function(loadingsmatrix,k) {
purrr::map(.x = 1:k,.f = function(x) {names(loadingsmatrix[order(abs(loadingsmatrix[,x]),decreasing = T),x])})
}
par(mfrow = c(2,2))
plot(pls.lm.Fit, which = 1:4)
summary(pls.lm.Fit)
set.seed(7)
# load the library
library(mlbench)
library(caret)
control <- rfeControl(functions = rfFuncs, method = "cv",number = 10)
results <- rfe(cordata[,2:20],cordata[,1],sizes = c(1:19),rfeControl = control)
# summarize the results
print(results)
# list the chosen features
predictors(results)
# plot the results
plot(results, type=c("g", "o"))
form <- paste("TARGET_WINS ~",paste(c( "TEAM_FIELDING_E", "TEAM_BATTING_H", "TEAM_BATTING_BB", "TEAM_PITCHING_SO"),collapse = "+"))
rf.Fit <- lm(data =cordata,formul = form)
formula_rf <- as.character(formula(rf.Fit))[3]
predictors_rf <- unlist(strsplit(formula_rf, split = "+",fixed = T))
coef.rf <- round(coefficients(rf.Fit),2)
signs.rf <- ifelse(sign(coef.rf)==1,"+", "-")
Betas.rf <- paste(abs(coef.rf[2:length(coef.rf)]),"*",predictors_rf)
eqn.rf <- paste("TARGET_WINS =", paste(coef.rf[1],paste(paste(signs.rf[2:length(signs.rf)],Betas.rf),collapse = " ")))
summary(rf.Fit)
MoneyBallDataPrep <- function(Path) {
# Library calls
library(dplyr)
library(magrittr)
library(VIM)
# read data in
MB2 <- read.csv(file = Path , header = T)
# Identity columns positions of those that are not required.
NotRequired <- c("INDEX", "TEAM_BATTING_HBP")
NotRequiredPos <- which(colnames(MB2) %in% NotRequired)
# Impute Data
MB2 <- kNN(data = MB2,variable = colnames(MB2)[NotRequiredPos*-1], k = 5)
# Attrubute and indicator variables
MB2 <- MB2  %>%
mutate(BatHR_Filter = as.logical(ifelse(TEAM_BATTING_HR <= 59, 1,0))) %>%
mutate(BatSO_Filter = as.logical(ifelse(TEAM_BATTING_SO <= 250, 1,0))) %>%
mutate(PitSO_Filter = as.logical(ifelse(TEAM_PITCHING_SO > 2000, 1, 0))) %>%
mutate(Pitch_H_Outlier = as.logical(ifelse(TEAM_PITCHING_H >= 1890, 1,0)))
Pitch_H_outlierT <- MB2$INDEX[MB2$Pitch_H_Outlier]
BatSO_Filter_T <- MB2$INDEX[MB2$BatSO_Filter]
PitSOFilter_T <- MB2$INDEX[MB2$PitSO_Filter]
MB2 <- MB2 %>%
mutate (AltSlope = as.logical(ifelse(INDEX %in% setdiff(setdiff(Pitch_H_outlierT,BatSO_Filter_T), PitSOFilter_T), 1,0)))
# Get required columns
reqcols <- colnames(MB2)[c(grep("_imp",colnames(MB2))*-1,NotRequiredPos*-1)]
MB2 %>% dplyr::select(reqcols)
}
TestData <- MoneyBallDataPrep(Path = 'MoneyBall.csv')
# Test of Simple model
simple.Fitted <- predict(simple.Fit, newdata = TestData)
View(TestData)
knitr::opts_chunk$set(echo = FALSE, warning = F, message = F,tidy.opts=list(width.cutoff=70),tidy=TRUE)
library(magrittr)
library(dplyr)
TestData <- MoneyBallDataPrep(Path = 'MoneyBall.csv')
TestData$Pitch_H_Outlier <- as.numeric(TestData$Pitch_H_Outlier)
# Test of Simple model
simple.Fitted <- predict(simple.Fit, newdata = TestData)
MAE_Simple.Fit <- mean(abs(TestData$TARGET_WINS - simple.Fitted))
MSE_Simple.Fit <- mean((TestData$TARGET_WINS - simple.Fitted)^2)
AIC_Simple.Fit <- AIC(simple.Fit)
AdjRSquared_Simple.Fit <- summary(simple.Fit)$adj.r.squared
# Test of Simple.rev.Fit
simple.rev.fitted <- predict(simple.rev.Fit,newdata = TestData)
#plot(TestData$TARGET_WINS , simple.rev.fitted)
MAE_Simple.rev.Fit <- mean(abs(TestData$TARGET_WINS - simple.rev.fitted))
MSE_Simple.rev.Fit <- mean((TestData$TARGET_WINS - simple.rev.fitted)^2)
AIC_Simple.rev.Fit <- AIC(simple.rev.Fit)
AdjRSquared_Simple.rev.Fit <- summary(simple.rev.Fit)$adj.r.squared
# Test of Simple Stepwise fit
simple.step.fitted <- predict(object = Simple.step.Fit,newdata = TestData)
MAE_simple.step.Fit <- mean(abs(TestData$TARGET_WINS - simple.step.fitted))
MSE_simple.step.Fit <- mean((TestData$TARGET_WINS - simple.step.fitted)^2)
AIC_simple.step.Fit <- AIC(Simple.step.Fit)
AdjRSquared_Simple.Step <- summary(Simple.step.Fit)$adj.r.squared
# Test of PCR
xtest <- TestData[,pcavars]
pca.fitted <- predict(pca.Fit,newdata = xtest,ncomp = 6)
TestData <- MoneyBallDataPrep(Path = 'MoneyBall.csv')
TestData$Pitch_H_Outlier <- as.numeric(TestData$Pitch_H_Outlier)
# Test of Simple model
simple.Fitted <- predict(simple.Fit, newdata = TestData)
MAE_Simple.Fit <- mean(abs(TestData$TARGET_WINS - simple.Fitted))
MSE_Simple.Fit <- mean((TestData$TARGET_WINS - simple.Fitted)^2)
AIC_Simple.Fit <- AIC(simple.Fit)
AdjRSquared_Simple.Fit <- summary(simple.Fit)$adj.r.squared
# Test of Simple.rev.Fit
simple.rev.fitted <- predict(simple.rev.Fit,newdata = TestData)
#plot(TestData$TARGET_WINS , simple.rev.fitted)
MAE_Simple.rev.Fit <- mean(abs(TestData$TARGET_WINS - simple.rev.fitted))
MSE_Simple.rev.Fit <- mean((TestData$TARGET_WINS - simple.rev.fitted)^2)
AIC_Simple.rev.Fit <- AIC(simple.rev.Fit)
AdjRSquared_Simple.rev.Fit <- summary(simple.rev.Fit)$adj.r.squared
# Test of Simple Stepwise fit
simple.step.fitted <- predict(object = Simple.step.Fit,newdata = TestData)
MAE_simple.step.Fit <- mean(abs(TestData$TARGET_WINS - simple.step.fitted))
MSE_simple.step.Fit <- mean((TestData$TARGET_WINS - simple.step.fitted)^2)
AIC_simple.step.Fit <- AIC(Simple.step.Fit)
AdjRSquared_Simple.Step <- summary(Simple.step.Fit)$adj.r.squared
# Test of PCR
xtest <- TestData[,pcavars]
pca.fitted <- predict(pca.Fit,newdata = xtest,ncomp = 6)
TestData <- MoneyBallDataPrep(Path = 'MoneyBall.csv')
TestData$Pitch_H_Outlier <- as.numeric(TestData$Pitch_H_Outlier)
# Test of Simple model
simple.Fitted <- predict(simple.Fit, newdata = TestData)
MAE_Simple.Fit <- mean(abs(TestData$TARGET_WINS - simple.Fitted))
MSE_Simple.Fit <- mean((TestData$TARGET_WINS - simple.Fitted)^2)
AIC_Simple.Fit <- AIC(simple.Fit)
AdjRSquared_Simple.Fit <- summary(simple.Fit)$adj.r.squared
# Test of Simple.rev.Fit
simple.rev.fitted <- predict(simple.rev.Fit,newdata = TestData)
#plot(TestData$TARGET_WINS , simple.rev.fitted)
MAE_Simple.rev.Fit <- mean(abs(TestData$TARGET_WINS - simple.rev.fitted))
MSE_Simple.rev.Fit <- mean((TestData$TARGET_WINS - simple.rev.fitted)^2)
AIC_Simple.rev.Fit <- AIC(simple.rev.Fit)
AdjRSquared_Simple.rev.Fit <- summary(simple.rev.Fit)$adj.r.squared
# Test of Simple Stepwise fit
simple.step.fitted <- predict(object = Simple.step.Fit,newdata = TestData)
MAE_simple.step.Fit <- mean(abs(TestData$TARGET_WINS - simple.step.fitted))
MSE_simple.step.Fit <- mean((TestData$TARGET_WINS - simple.step.fitted)^2)
AIC_simple.step.Fit <- AIC(Simple.step.Fit)
AdjRSquared_Simple.Step <- summary(Simple.step.Fit)$adj.r.squared
# Test of PCR
xtest <- TestData[,pcavars]
pca.fitted <- predict(pca.Fit,newdata = xtest,ncomp = 6)
View(x)
TestData <- MoneyBallDataPrep(Path = 'MoneyBall.csv')
TestData$Pitch_H_Outlier <- as.numeric(TestData$Pitch_H_Outlier)
# Test of Simple model
simple.Fitted <- predict(simple.Fit, newdata = TestData)
MAE_Simple.Fit <- mean(abs(TestData$TARGET_WINS - simple.Fitted))
MSE_Simple.Fit <- mean((TestData$TARGET_WINS - simple.Fitted)^2)
AIC_Simple.Fit <- AIC(simple.Fit)
AdjRSquared_Simple.Fit <- summary(simple.Fit)$adj.r.squared
# Test of Simple.rev.Fit
simple.rev.fitted <- predict(simple.rev.Fit,newdata = TestData)
#plot(TestData$TARGET_WINS , simple.rev.fitted)
MAE_Simple.rev.Fit <- mean(abs(TestData$TARGET_WINS - simple.rev.fitted))
MSE_Simple.rev.Fit <- mean((TestData$TARGET_WINS - simple.rev.fitted)^2)
AIC_Simple.rev.Fit <- AIC(simple.rev.Fit)
AdjRSquared_Simple.rev.Fit <- summary(simple.rev.Fit)$adj.r.squared
# Test of Simple Stepwise fit
simple.step.fitted <- predict(object = Simple.step.Fit,newdata = TestData)
MAE_simple.step.Fit <- mean(abs(TestData$TARGET_WINS - simple.step.fitted))
MSE_simple.step.Fit <- mean((TestData$TARGET_WINS - simple.step.fitted)^2)
AIC_simple.step.Fit <- AIC(Simple.step.Fit)
AdjRSquared_Simple.Step <- summary(Simple.step.Fit)$adj.r.squared
# Test of PCR
xtest <- TestData[,pcavars]
xtest$Pitch_H_Outlier <- as.logical(xtest$Pitch_H_Outlier)
pca.fitted <- predict(pca.Fit,newdata = xtest,ncomp = 6)
TestData <- MoneyBallDataPrep(Path = 'MoneyBall.csv')
#TestData$Pitch_H_Outlier <- as.numeric(TestData$Pitch_H_Outlier)
# Test of Simple model
simple.Fitted <- predict(simple.Fit, newdata = TestData)
TestData <- MoneyBallDataPrep(Path = 'MoneyBall.csv')
TestData$Pitch_H_Outlier <- as.numeric(TestData$Pitch_H_Outlier)
# Test of Simple model
simple.Fitted <- predict(simple.Fit, newdata = TestData)
MAE_Simple.Fit <- mean(abs(TestData$TARGET_WINS - simple.Fitted))
MSE_Simple.Fit <- mean((TestData$TARGET_WINS - simple.Fitted)^2)
AIC_Simple.Fit <- AIC(simple.Fit)
AdjRSquared_Simple.Fit <- summary(simple.Fit)$adj.r.squared
# Test of Simple.rev.Fit
simple.rev.fitted <- predict(simple.rev.Fit,newdata = TestData)
#plot(TestData$TARGET_WINS , simple.rev.fitted)
MAE_Simple.rev.Fit <- mean(abs(TestData$TARGET_WINS - simple.rev.fitted))
MSE_Simple.rev.Fit <- mean((TestData$TARGET_WINS - simple.rev.fitted)^2)
AIC_Simple.rev.Fit <- AIC(simple.rev.Fit)
AdjRSquared_Simple.rev.Fit <- summary(simple.rev.Fit)$adj.r.squared
# Test of Simple Stepwise fit
simple.step.fitted <- predict(object = Simple.step.Fit,newdata = TestData)
MAE_simple.step.Fit <- mean(abs(TestData$TARGET_WINS - simple.step.fitted))
MSE_simple.step.Fit <- mean((TestData$TARGET_WINS - simple.step.fitted)^2)
AIC_simple.step.Fit <- AIC(Simple.step.Fit)
AdjRSquared_Simple.Step <- summary(Simple.step.Fit)$adj.r.squared
# Test of PCR
xtest <- TestData[,pcavars]
#xtest$Pitch_H_Outlier <- as.logical(xtest$Pitch_H_Outlier)
pca.fitted <- predict(pca.Fit,newdata = xtest,ncomp = 6)
# cleanup data for PCA
nearzeros <- caret::nearZeroVar(cordata,saveMetrics = T)
zerovars <- rownames(nearzeros)[nearzeros$zeroVar]
pcavars <- colnames(cordata)[c(1,which(colnames(cordata) %in% zerovars))*-1]
pcadata <- cordata[,pcavars]
pca <- princomp(pcadata,cor = T)
#summary(pca)
# x <- model.matrix(TARGET_WINS ~., data = cordata)[,-1]
# colnames(x)[15:19] <- c("Pitch_H_Outlier","Bat_HR_Filter","BatSO_Filter", "PitSO_Filter","flag")
# pca <- princomp(x[,-17:-18],cor = T)
# summary(pca)
cumvariance <- cumsum(pca$sdev^2) / sum(pca$sdev^2)
plot(cumvariance, xlab = "Component Number", ylab = "Cumulative Variance", type = "l")
points(cumvariance)
pca.scores <- pca$scores[,1:6]
#df <- data.frame(pca.scores,MB[reqrows,colnames(MB)[c(2,24)]])
dfclust <- data.frame(pca.scores,cordata[,c('Pitch_H_Outlier','BatHR_Filter','AltSlope', 'TARGET_WINS')])
dfclust <- dfclust %>% dplyr::mutate(cluster = as.factor(Pitch_H_Outlier + BatHR_Filter/10))
#colnames(df)[7] <- c("TARGET_WINS")
clust1 <- ggplot(data = dfclust, mapping = aes(x = Comp.1, y = Comp.2, color = cluster )) + geom_point() + theme_bw()
clust2 <- ggplot(data = dfclust, mapping = aes(x = Comp.1, y = Comp.2, color = AltSlope)) + geom_point() + theme_bw()
library("RColorBrewer")
myPalette <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
sc <- scale_colour_gradientn(colours = myPalette(100))
clust3 <- ggplot(data = dfclust, mapping = aes(x = Comp.1, y = Comp.2, color = TARGET_WINS)) + geom_point() + theme_bw() + scale_colour_gradient2() + sc
gridExtra::grid.arrange(clust1,clust2,clust3, ncol=2)
summary(pca.step.Fit)
anova(pca.step.Fit)
par(mfrow=c(2,2))
plot(pca.step.Fit, which = 1:4)
pca.forward.Fit <- stepAIC(lower.lm, scope = list(upper = formula(upper.lm), lower = ~1), direction = "forward", trace = F)
#summary(pca.forward.Fit)
#plot(pca.forward.Fit)
pca.backward.Fit<- stepAIC(lower.lm, scope = list(upper = formula(upper.lm), lower = ~1), direction = "backward", trace = F)
# summary(pca.backward.Fit)
# plot(pca.backward.Fit)
# The below code just replicates the pca.step.Fit for easy prediction for testing. Its a change in class object.
pcadatarev <- data.frame(TARGET_WINS = cordata[,1],pcadata)
pca.Fit <- pls::pcr(data = pcadatarev, formula = TARGET_WINS ~ .,scale = T,ncomp = 6)
TestData <- MoneyBallDataPrep(Path = 'MoneyBall.csv')
TestData$Pitch_H_Outlier <- as.numeric(TestData$Pitch_H_Outlier)
# Test of Simple model
simple.Fitted <- predict(simple.Fit, newdata = TestData)
MAE_Simple.Fit <- mean(abs(TestData$TARGET_WINS - simple.Fitted))
MSE_Simple.Fit <- mean((TestData$TARGET_WINS - simple.Fitted)^2)
AIC_Simple.Fit <- AIC(simple.Fit)
AdjRSquared_Simple.Fit <- summary(simple.Fit)$adj.r.squared
# Test of Simple.rev.Fit
simple.rev.fitted <- predict(simple.rev.Fit,newdata = TestData)
#plot(TestData$TARGET_WINS , simple.rev.fitted)
MAE_Simple.rev.Fit <- mean(abs(TestData$TARGET_WINS - simple.rev.fitted))
MSE_Simple.rev.Fit <- mean((TestData$TARGET_WINS - simple.rev.fitted)^2)
AIC_Simple.rev.Fit <- AIC(simple.rev.Fit)
AdjRSquared_Simple.rev.Fit <- summary(simple.rev.Fit)$adj.r.squared
# Test of Simple Stepwise fit
simple.step.fitted <- predict(object = Simple.step.Fit,newdata = TestData)
MAE_simple.step.Fit <- mean(abs(TestData$TARGET_WINS - simple.step.fitted))
MSE_simple.step.Fit <- mean((TestData$TARGET_WINS - simple.step.fitted)^2)
AIC_simple.step.Fit <- AIC(Simple.step.Fit)
AdjRSquared_Simple.Step <- summary(Simple.step.Fit)$adj.r.squared
# Test of PCR
xtest <- TestData[,pcavars]
#xtest$Pitch_H_Outlier <- as.logical(xtest$Pitch_H_Outlier)
pca.fitted <- predict(pca.Fit,newdata = xtest,ncomp = 6)
MAE_pca.Fit <- mean(abs(TestData$TARGET_WINS - pca.fitted))
MSE_pca.Fit <- mean((TestData$TARGET_WINS - pca.fitted)^2)
AIC_pca.Fit <- AIC(pca.step.Fit) # using a non mvr class for AIC calculation
AdjRSquared_pca.Fit <- summary(pca.step.Fit)$adj.r.squared
# Test of predictors from Lasso fit.
lasso.OLS.Fitted <- predict(Lasso.OLS.Fit,newdata = TestData)
MAE_lasso.OLS.Fit <- mean(abs(TestData$TARGET_WINS - lasso.OLS.Fitted))
MSE_lasso.OLS.Fit <- mean((TestData$TARGET_WINS - lasso.OLS.Fitted)^2)
AIC_Lasso.OLS.Fit <- AIC(Lasso.OLS.Fit)
AdjRSquared_Lasso.OLS.Fit <- summary(Lasso.OLS.Fit)$adj.r.squared
# Test of PLS model
TestData.rev <- TestData %>%
mutate(Pitch_H_Outlier = as.numeric(Pitch_H_Outlier)) %>%
mutate(BatHR_Filter = as.numeric(BatHR_Filter)) %>%
mutate(AltSlope = as.numeric(AltSlope))
pls.Fitted <- predict(pls.Fit, newdata = TestData.rev, ncomp = 4)
MAE_pls.Fit <- mean(abs(TestData.rev$TARGET_WINS - pls.Fitted))
MSE_pls.Fit <- mean((TestData.rev$TARGET_WINS - pls.Fitted)^2)
AIC_pls.Fit <- AIC(pls.lm.Fit)
AdjRSquared_pls.Fit <- summary(pls.lm.Fit)$adj.r.squared
# random forest predictors
rf.Fitted <- predict(rf.Fit, newdata = TestData)
MAE_rf.Fit <- mean(abs(TestData.rev$TARGET_WINS - rf.Fitted))
MSE_rf.Fit <- mean((TestData.rev$TARGET_WINS - rf.Fitted)^2)
AIC_rf.Fit <- AIC(rf.Fit)
AdjRSquared_AIC_rf.Fit <- summary(rf.Fit)$adj.r.squared
ModelComparison <- data.frame(Type = c("Simple","Simple revised", "Stepwise", "Prin.Comp.Regression","Lasso Predictors", "Partial Least Squares", "Random forest predictors" ),
Formula = c(eqn.simple,eqn.simple.rev,eqn.simple.step,eqn.pca.step,eqn.Lasso.OLS,eqn.pls,eqn.rf),
Adj.R.Squared = c(AdjRSquared_Simple.Fit,AdjRSquared_Simple.rev.Fit,AdjRSquared_Simple.Step,AdjRSquared_pca.Fit,AdjRSquared_Lasso.OLS.Fit,AdjRSquared_pls.Fit,AdjRSquared_AIC_rf.Fit),
AIC = c(AIC_Simple.Fit,AIC_Simple.rev.Fit,AIC_simple.step.Fit,AIC_pca.Fit,AIC_Lasso.OLS.Fit,AIC_pls.Fit,AIC_rf.Fit),
MAE = c(MAE_Simple.Fit,MAE_Simple.rev.Fit,MAE_simple.step.Fit,MAE_pca.Fit,MAE_lasso.OLS.Fit,MAE_pls.Fit,MAE_rf.Fit))
pander::pandoc.table(ModelComparison)
PredictionData <- read.csv(file = "MoneyBall_Test.csv")
Processed.PredictData <- MoneyBallDataPrep("MoneyBall_Test.csv")
P_TARGET_WINS <- round(predict(simple.rev.Fit,newdata = Processed.PredictData),0)
Processed.PredictData$P_TARGET_WINS <- P_TARGET_WINS
write.csv(file = "MoneyBall_Test_Seshadri.csv")
PredictionData <- read.csv(file = "MoneyBall_Test.csv")
Processed.PredictData <- MoneyBallDataPrep("MoneyBall_Test.csv")
P_TARGET_WINS <- round(predict(simple.rev.Fit,newdata = Processed.PredictData),0)
Processed.PredictData$P_TARGET_WINS <- P_TARGET_WINS
write.csv(file = "MoneyBall_Test_Seshadri.csv",Processed.PredictData)
#hist(P_TARGET_WINS)
eqn.simple.rev
dictionary <- readxl::read_xlsx('DataDictionary_Baseball.xlsx', sheet = 1)
knitr::kable(dictionary)
library(magrittr)
df <- readxl::read_xls(path = 'data-ex-13-1 (Pneumoconiosis).xls',sheet = 1,col_names = T) %>%
dplyr::mutate(`Non Severe` = `Total Number of Miners` - `Number of Severe Cases`) %>%
dplyr::select(`Number of Years of Exposure`,`Non Severe`,`Number of Severe Cases`)
View(df)
ymat <- as.matrix(df[,c(3,2)])
anal <- glm(ymat ~ df$`Number of Years of Exposure`, family = binomial)
summary(anal)
deviance(anal)
logLik(anal)
-2*logLik(anal)
-2*logLik(anal)/6
eta <- anal$coefficients[1] + anal$coefficients[2]*df$`Number of Years of Exposure`
eta
anal$y
anal$fitted.values
predict(anal,newdata = df$`Number of Years of Exposure`)
predict(anal,df$`Number of Years of Exposure`)
predict(anal,df$`Number of Years of Exposure`[1])
predict(anal,as.data.frame(`Number of Years of Exposure` = df$`Number of Years of Exposure`))
predict(anal,df)
predict(anal,df,type = "response")
sum(anal$y*eta) - sum(log(1+exp(eta)))
sum(anal$y*eta) - sum(log(1+exp(eta)))*-2
deviance
deviance(anal)
(sum(anal$y*eta) - sum(log(1+exp(eta))))*-2
logLik(anal)
logLik(anal)/2
bottle = data.frame(n=rep(500,6), deposit=c(2,5,10,20,25,30),y=c(72,103,170,296,406,449)) plot(bottle$deposit, bottle$y/bottle$n)
bot2 = data.frame(x=rep(bottle$deposit,2), y=c(rep(0,6), rep(1,6)),
count=c(500-bottle$y, bottle$y))
bottle = data.frame(n=rep(500,6), deposit=c(2,5,10,20,25,30),y=c(72,103,170,296,406,449)) plot(bottle$deposit, bottle$y/bottle$n)
bottle <- data.frame(n=rep(500,6), deposit=c(2,5,10,20,25,30),y=c(72,103,170,296,406,449)) plot(bottle$deposit, bottle$y/bottle$n)
bottle <- data.frame(n=rep(500,6), deposit=c(2,5,10,20,25,30),y=c(72,103,170,296,406,449))
plot(bottle$deposit, bottle$y/bottle$n)
bot2 = data.frame(x=rep(bottle$deposit,2), y=c(rep(0,6), rep(1,6)),
count=c(500-bottle$y, bottle$y))
fit = glm(y~x, bot2, family=binomial, weight=count)
logLik(fit)
deviance(fit)
AIC(object = fit)
summary(fit)
readxl::read_xls(path = 'data-ex-13-1 (Pneumoconiosis).xls',sheet = 1,col_names = T)
df2 <- readxl::read_xls(path = 'data-ex-13-1 (Pneumoconiosis).xls',sheet = 1,col_names = T)
df3$y <- c(rep(1,8), rep(0,8))
df$years <- rep(df2$`Number of Years of Exposure`,2)
df$cases <- c(df2$`Number of Severe Cases`,df2$`Total Number of Miners`-df2$`Number of Severe Cases` )
df3 <- data.frame()
df3$y <- c(rep(1,8), rep(0,8))
y <- c(rep(1,8), rep(0,8))
years <- rep(df2$`Number of Years of Exposure`,2)
cases <- c(df2$`Number of Severe Cases`,df2$`Total Number of Miners`-df2$`Number of Severe Cases` )
df3 <- data.frame(years,y,cases)
View(df3)
anal <- glm(ymat ~ df$`Number of Years of Exposure`, family = binomial)
anal2 <- glm(y~years, family = binomial, weights = cases, data = df3)
summary(anal2)
summary(anal)
deviance(anal2)
logLik(anal2)
logLik(anal2)*-2
deviance(anal2)/13*6
deviance(anal2)/13
chisq.test(deviance(anal2),13)
chisq.test(deviance(anal2))
pchisq(219.3273,13)
dchisq(219.3273,13)
qchisq(219.3273,13)
chisq(219.3273,13)
pchisq(219.3273,13)
summary(anal2)
anova(anal2)
logLik(anal2)
logLik(anal2)*-2
deviance(anal2)
deviance(anal2)/14
anal3 <- glm(y~years, family = binomial, data = df3)
summary(anal3)
summary(anal2)
View(df2)
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
df <- readxl::read_xls(path = 'data-ex-13-1 (Pneumoconiosis).xls',sheet = 1,col_names = T)
View(df)
glm(formula = `Proportion of Severe Cases` ~ `Number of Years of Exposure`, family = binomial)
glm(formula = `Proportion of Severe Cases` ~ `Number of Years of Exposure`, family = binomial,data = df)
glm(formula = `Proportion of Severe Cases,y` ~ `Number of Years of Exposure`, family = binomial,data = df)
glm(formula = `Proportion of Severe Cases, y` ~ `Number of Years of Exposure`, family = binomial,data = df)
colnames(df) <- c('Years','Cases','Miners','Proportion')
glm(formula = Cases ~ Years, family = binomial,data = df)
df.cleaned <- df[,-4]
glm(df.cleaned[,c(2,3)]~df.cleaned$Years, family = binomial)
glm(as.matrix(df.cleaned[,c(2,3)])~df.cleaned$Years, family = binomial)
y <- as.matrix(df.cleaned$Cases , df.cleaned$Miners - df.cleaned$Cases)
x <- df.cleaned$Years
fit1 <- glm(y~x, family = binomial)
View(y)
y <- as.matrix(df.cleaned$Cases , df.cleaned$Miners - df.cleaned$Cases)
y <- cbind(df.cleaned$Cases , df.cleaned$Miners - df.cleaned$Cases)
View(y)
x <- df.cleaned$Years
fit1 <- glm(y~x, family = binomial)
summary.glm(fit1)
summary.glm(fit1)
anova.glm(fit1)
summary.glm(fit1)
anova(fit1)
logLik(fit1)
logLik(fit1) * -2
deviance(fit2)
deviance(fit1)
logLik(fit1)
logLik(fit1)/-2
deviance(fit1)
loglikelihood <- sum(cases*(coef(fit1)[1] + coef(fit1)[2]*x)) - sum(df.cleaned$Miners*log(1 + exp(coef(fit1)[1] + coef(fit1)[2]*x)))
loglikelihood <- sum(Cases*(coef(fit1)[1] + coef(fit1)[2]*x)) - sum(df.cleaned$Miners*log(1 + exp(coef(fit1)[1] + coef(fit1)[2]*x)))
loglikelihood <- sum(df.cleaned$Cases*(coef(fit1)[1] + coef(fit1)[2]*x)) - sum(df.cleaned$Miners*log(1 + exp(coef(fit1)[1] + coef(fit1)[2]*x)))
print(loglikelihood)
loglikelihood_test <- sum((coef(fit1)[1] + coef(fit1)[2]*x)) - sum(log(1 + exp(coef(fit1)[1] + coef(fit1)[2]*x)))
print(loglikelihood_test)
logLik(fit1)
sum((coef(fit1)[1] + coef(fit1)[2]*x)) - sum(df.cleaned$Miners*log(1 + exp(coef(fit1)[1] + coef(fit1)[2]*x)))
loglikelihood_test <- sum(df.cleaned$Cases*(coef(fit1)[1] + coef(fit1)[2]*x)) - sum(log(1 + exp(coef(fit1)[1] + coef(fit1)[2]*x)))
sum(df.cleaned$Cases*(coef(fit1)[1] + coef(fit1)[2]*x)) - sum(log(1 + exp(coef(fit1)[1] + coef(fit1)[2]*x)))
loglikelihood_test <- sum((coef(fit1)[1] + coef(fit1)[2]*x)) - sum(log(1 + exp(coef(fit1)[1] + coef(fit1)[2]*x)))
sum((coef(fit1)[1] + coef(fit1)[2]*x)) - sum(log(1 + exp(coef(fit1)[1] + coef(fit1)[2]*x)))
coef(fit1)[1]
AIC(fit1)
df2 <- as.data.frame( y = c(rep(1,8), rep(0,8)), years = rep(df.cleaned$Years,2), counts = c(df.cleaned$Cases,df.cleaned$Miners - df.cleaned$Cases ))
df2 <- data.frame( y = c(rep(1,8), rep(0,8)), years = rep(df.cleaned$Years,2), counts = c(df.cleaned$Cases,df.cleaned$Miners - df.cleaned$Cases ))
df2
knitr::kable(df2)
df2 <- data.frame( y = as.factor(c(rep(1,8), rep(0,8))), years = rep(df.cleaned$Years,2), counts = c(df.cleaned$Cases,df.cleaned$Miners - df.cleaned$Cases ))
knitr::kable(df2,caption = "Factor response")
fit2 <- glm(formula = y~years, family = binomial, weights = counts)
fit2 <- glm(formula = y~years, family = binomial, weights = counts, data = df2)
summary.glm(fit2)
logLik(fit2)
summary.glm(fit2)
anova(fit2)
logLik(fit2)
deviance(fit2)
AIC(fit1)
AIC(fit2)
Hitters <- ISLR::Hitters
head(Hitters)
install.packages("tree")
test <- tree::tree(Salary ~ . , data = Hitters)
summary(test)
plot(test)
plot(test)
text(test, pretty = 0)
test
knitr::opts_chunk$set(echo = F)
df <- read.csv('logit_insurance_rev.csv')
sanitycheck <- do.call(rbind,dfapply(df,favstats, select = is.numeric))
library(mosaic)
library(mosaic)
sanitycheck <- do.call(rbind,dfapply(df,favstats, select = is.numeric))
sanitycheck
View(df)
df <- read.csv('logit_insurance_rev.csv')
library(mosaic)
sanitycheck <- do.call(rbind,dfapply(df,favstats, select = is.numeric))
knitr::kable(sanitycheck, caption = "Summary statistics")
df.rev <- df %>%
dplyr::mutate(YOJ_Missing = ifelse(is.na(YOJ),1,0)) %>%
dplyr::mutate(Income_Missing = ifelse(is.na(INCOME),1,0)) %>%
dplyr::mutate(HOME_Val_Missing = ifelse(is.na(HOME_VAL),1,0)) %>%
dplyr::mutate(CAR_AGE_Missing = iselse(is.na(CAR_AGE),1,0)) %>%
dplyr::mutate(AGE_Missing = ifelse(is.na(AGE),1,0))
df <- read.csv('logit_insurance_rev.csv')
library(mosaic)
sanitycheck <- do.call(rbind,dfapply(df,favstats, select = is.numeric))
knitr::kable(sanitycheck, caption = "Summary statistics")
df.rev <- df %>%
dplyr::mutate(YOJ_Missing = ifelse(is.na(YOJ),1,0)) %>%
dplyr::mutate(Income_Missing = ifelse(is.na(INCOME),1,0)) %>%
dplyr::mutate(HOME_Val_Missing = ifelse(is.na(HOME_VAL),1,0)) %>%
dplyr::mutate(CAR_AGE_Missing = ifelse(is.na(CAR_AGE),1,0)) %>%
dplyr::mutate(AGE_Missing = ifelse(is.na(AGE),1,0))
write.csv(df.rev, file = 'insurancedata.csv')
write.csv2(df.rev, file = 'insurancedata.csv')
write.table(df.rev,'insurancedata.csv')
