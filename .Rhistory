MB <- MB %>%
mutate(Missing_BatSO = as.logical(ifelse(is.na(TEAM_BATTING_SO),1,0))) %>%
mutate(Missing_BasSB = as.logical(ifelse(is.na(TEAM_BASERUN_SB),1,0))) %>%
mutate(Missing_BasCS = as.logical(ifelse(is.na(TEAM_BASERUN_CS),1,0))) %>%
mutate(Missing_PitSO = as.logical(ifelse(is.na(TEAM_PITCHING_SO),1,0))) %>%
mutate(Missing_FieldDP = as.logical(ifelse(is.na(TEAM_FIELDING_DP),1,0)))
MB$Filter <- as.logical(ifelse(rowSums(MB[,18:22]) > 0 ,1, 0))
library(ggplot2)
# p0 <- ggplot(data = MB, mapping = aes(x = TEAM_BATTING_HR, color = Missing_BatSO, fill = Missing_BatSO)) + geom_histogram(alpha = 0.5)
p1 <- ggplot(data = MB, mapping = aes(x = TEAM_BATTING_HR, color = Filter, fill = Filter)) + geom_histogram(alpha = 0.5) + theme_bw()
p2 <- ggplot(data = MB, mapping = aes(x = TEAM_BATTING_SO, color = Filter, fill = Filter)) + geom_histogram(alpha = 0.5) + theme_bw()
gridExtra::grid.arrange(p1,p2,ncol = 2)
cordata <- MB %>% select(cols[c(-1,-11)])
cordata <- cordata[complete.cases(cordata),]
corrplot::corrplot(cor(cordata),tl.cex = 0.8)
ggplot(data = MB, mapping = aes(x = TEAM_PITCHING_H, y = TEAM_BATTING_H, color = Filter)) + geom_point()
ggplot(data = MB, mapping = aes(x = TEAM_PITCHING_H, fill = Filter, color = Filter)) + geom_histogram(alpha = 0.5) + facet_grid(Filter ~ .)
MB <- MB %>%
dplyr::mutate(Pitch_H_Outlier = as.logical(ifelse(TEAM_PITCHING_H >= 1890, 1,0)))
MB_test <- MB %>% filter(Filter == F)
ggplot(data = MB_test,mapping = aes(x = TEAM_PITCHING_H, color = Pitch_H_Outlier, fill = Pitch_H_Outlier)) + geom_histogram(alpha = 0.5) + theme_bw()
ggplot(data = MB_test, mapping = aes(x = TEAM_PITCHING_H, y = TEAM_BATTING_H, color = Pitch_H_Outlier )) + geom_point() + theme_bw()
ggplot(data = MB_test, mapping = aes(x = TEAM_PITCHING_SO, y = TEAM_BATTING_SO, color = Pitch_H_Outlier )) + geom_point() + theme_bw()
ggplot(data = MB_test, mapping = aes(x = TEAM_PITCHING_BB, y = TEAM_BATTING_BB, color = Pitch_H_Outlier )) + geom_point() + theme_bw()
ggplot(data = MB_test, mapping = aes(x = TEAM_PITCHING_HR, y = TEAM_BATTING_HR, color = Pitch_H_Outlier )) + geom_point() + theme_bw()
MB <- MB  %>%
mutate(BatHR_Filter = as.logical(ifelse(TEAM_BATTING_HR <= 59, 1,0))) %>%
mutate(BatSO_Filter = as.logical(ifelse(TEAM_BATTING_SO <= 250, 1,0)))
MB$HRSO_Filter <- as.logical(ifelse(rowSums(MB[,c('BatHR_Filter','BatSO_Filter')]) > 0 ,1, 0))
ggplot(data = MB, mapping = aes(x = TEAM_PITCHING_HR, y = TEAM_BATTING_HR, color = Pitch_H_Outlier )) + geom_point() + theme_bw()
reqcols <- colnames(MB)[c(-1,-11,-18:-27)]
cordata <- MB %>% dplyr::select(reqcols)
reqrows <- complete.cases(cordata)
cordata <- cordata[reqrows,]
x <- model.matrix(TARGET_WINS ~., data = cordata)[,-1]
pca <- princomp(x,cor = T)
summary(pca)
cumvariance <- cumsum(pca$sdev^2) / sum(pca$sdev^2)
plot(cumvariance, xlab = "Component Number", ylab = "Cumulative Variance", type = "l")
points(cumvariance)
pca.scores <- pca$scores[,1:9]
df <- data.frame(pca.scores,MB[reqrows,colnames(MB)[c(2,24)]])
library(MASS)
lower.lm <- lm(data = df, formula = TARGET_WINS ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6)
upper.lm <- lm(data = df, formula = TARGET_WINS ~ .)
step.lm <- stepAIC(lower.lm, scope = list(upper = formula(upper.lm), lower = ~1), direction = "both", trace = F)
summary(step.lm)
anova(step.lm)
plot(step.lm)
car::vif(step.lm)
library(glmnet)
grid = 10^seq(10,-2,length = 100)
lasso.out <- cv.glmnet(x,df$TARGET_WINS,alpha = 1)
plot(lasso.out)
lasso.mod <- glmnet(x,df$TARGET_WINS,alpha = 1, lambda = lasso.out$lambda.min)
# important factors for feature selection or imputation
coef(lasso.mod)[order(abs(round(coef(lasso.mod),3)),decreasing = T),]
# R Squared
lasso.mod$dev.ratio
hist(MB$TEAM_BATTING_SO)
hist(MB2$TEAM_BATTING_SO)
MB2 <- kNN(data = MB,variable = colnames(MB)[c(-1,-11,-18:-27)], k = 5 )
library(VIM)
MB2 <- kNN(data = MB,variable = colnames(MB)[c(-1,-11,-18:-27)], k = 5 )
hist(MB2$TEAM_BATTING_SO)
hist(MB$TEAM_BATTING_SO)
corrplot::corrplot(MB2)
MB2 <- MB2 %>% subset(select = rownames(sanitycheck2))
sanitycheck2 <- do.call(rbind,dfapply(MB2,favstats, select = is.numeric))
MB2 <- MB2 %>% subset(select = rownames(sanitycheck2))
MB2 <- MB2[,c(-1,-11)]
corrplot::corrplot(MB2)
corrplot::corrplot(cor(MB2))
write.csv2(file = "MB2.csv", MB2)
MB2 <- kNN(data = MB,variable = colnames(MB)[c(-1,-11,-18:-27)], k = 5 )
write.csv2(file = "MB2_raw.csv", MB2)
MB2 <- kNN(data = MB,variable = colnames(MB)[c(-1,-11)], k = 5 )
ggplot(data = MB2, mapping = aes(x = TEAM_BATTING_SO, color = BatSO_Filter, fill = BatSO_Filter)) + geom_histogram(alpha = 0.5) + theme_bw()
union(c(T,F), c(F,T))
c(T,F) %+% c(F,T)
s <- c(T,F) %+% c(F,T)
s
MB <- MB  %>%
mutate(BatHR_Filter = as.logical(ifelse(TEAM_BATTING_HR <= 59, 1,0))) %>%
mutate(BatSO_Filter = as.logical(ifelse(TEAM_BATTING_SO <= 250, 1,0))) %>%
mutate(PitSO_Filter = as.logical(ifelse(TEAM_PITCHING_SO > 2000, 1, 0))) %>%
MB$SO_BatPit <- rowSums(MB[,c('BatSO_Filter','PitSO_Filter')])
MB <- MB  %>%
mutate(BatHR_Filter = as.logical(ifelse(TEAM_BATTING_HR <= 59, 1,0))) %>%
mutate(BatSO_Filter = as.logical(ifelse(TEAM_BATTING_SO <= 250, 1,0))) %>%
mutate(PitSO_Filter = as.logical(ifelse(TEAM_PITCHING_SO > 2000, 1, 0))) %>%
MB$SO_BatPit <- rowSums(MB[,c('BatSO_Filter','PitSO_Filter')])
MB[,c('BatSO_Filter','PitSO_Filter')]
knitr::opts_chunk$set(echo = FALSE, warning = F, message = F)
library(magrittr)
library(dplyr)
# Read the data in
MB <- read.csv('MoneyBall.csv')
cols <- colnames(MB)
library(mosaic)
# Compute overall statistic and show missing values
sanitycheck <- do.call(rbind,dfapply(MB,favstats, select = is.numeric))
rowname <- rownames(sanitycheck)
sanitycheck <- sanitycheck %>%  mutate(cv = sd/mean)
rownames(sanitycheck) <- rowname
knitr::kable(round(sanitycheck,2), caption = "Summary Stats and missing values")
# indicator variables for record missing
MB <- MB %>%
mutate(Missing_BatSO = as.logical(ifelse(is.na(TEAM_BATTING_SO),1,0))) %>%
mutate(Missing_BasSB = as.logical(ifelse(is.na(TEAM_BASERUN_SB),1,0))) %>%
mutate(Missing_BasCS = as.logical(ifelse(is.na(TEAM_BASERUN_CS),1,0))) %>%
mutate(Missing_PitSO = as.logical(ifelse(is.na(TEAM_PITCHING_SO),1,0))) %>%
mutate(Missing_FieldDP = as.logical(ifelse(is.na(TEAM_FIELDING_DP),1,0)))
MB$Filter <- as.logical(ifelse(rowSums(MB[,18:22]) > 0 ,1, 0))
library(ggplot2)
# p0 <- ggplot(data = MB, mapping = aes(x = TEAM_BATTING_HR, color = Missing_BatSO, fill = Missing_BatSO)) + geom_histogram(alpha = 0.5)
p1 <- ggplot(data = MB, mapping = aes(x = TEAM_BATTING_HR, color = Filter, fill = Filter)) + geom_histogram(alpha = 0.5) + theme_bw()
p2 <- ggplot(data = MB, mapping = aes(x = TEAM_BATTING_SO, color = Filter, fill = Filter)) + geom_histogram(alpha = 0.5) + theme_bw()
gridExtra::grid.arrange(p1,p2,ncol = 2)
cordata <- MB %>% select(cols[c(-1,-11)])
knitr::opts_chunk$set(echo = FALSE, warning = F, message = F)
library(magrittr)
library(dplyr)
# Read the data in
MB <- read.csv('MoneyBall.csv')
cols <- colnames(MB)
library(mosaic)
# Compute overall statistic and show missing values
sanitycheck <- do.call(rbind,dfapply(MB,favstats, select = is.numeric))
rowname <- rownames(sanitycheck)
sanitycheck <- sanitycheck %>%  mutate(cv = sd/mean)
rownames(sanitycheck) <- rowname
knitr::kable(round(sanitycheck,2), caption = "Summary Stats and missing values")
# indicator variables for record missing
MB <- MB %>%
mutate(Missing_BatSO = as.logical(ifelse(is.na(TEAM_BATTING_SO),1,0))) %>%
mutate(Missing_BasSB = as.logical(ifelse(is.na(TEAM_BASERUN_SB),1,0))) %>%
mutate(Missing_BasCS = as.logical(ifelse(is.na(TEAM_BASERUN_CS),1,0))) %>%
mutate(Missing_PitSO = as.logical(ifelse(is.na(TEAM_PITCHING_SO),1,0))) %>%
mutate(Missing_FieldDP = as.logical(ifelse(is.na(TEAM_FIELDING_DP),1,0)))
MB$Filter <- as.logical(ifelse(rowSums(MB[,18:22]) > 0 ,1, 0))
library(ggplot2)
# p0 <- ggplot(data = MB, mapping = aes(x = TEAM_BATTING_HR, color = Missing_BatSO, fill = Missing_BatSO)) + geom_histogram(alpha = 0.5)
p1 <- ggplot(data = MB, mapping = aes(x = TEAM_BATTING_HR, color = Filter, fill = Filter)) + geom_histogram(alpha = 0.5) + theme_bw()
p2 <- ggplot(data = MB, mapping = aes(x = TEAM_BATTING_SO, color = Filter, fill = Filter)) + geom_histogram(alpha = 0.5) + theme_bw()
gridExtra::grid.arrange(p1,p2,ncol = 2)
cordata <- MB %>% dplyr::select(cols[c(-1,-11)])
cordata <- cordata[complete.cases(cordata),]
corrplot::corrplot(cor(cordata),tl.cex = 0.8)
ggplot(data = MB, mapping = aes(x = TEAM_PITCHING_H, y = TEAM_BATTING_H, color = Filter)) + geom_point()
ggplot(data = MB, mapping = aes(x = TEAM_PITCHING_H, fill = Filter, color = Filter)) + geom_histogram(alpha = 0.5) + facet_grid(Filter ~ .)
MB <- MB %>%
dplyr::mutate(Pitch_H_Outlier = as.logical(ifelse(TEAM_PITCHING_H >= 1890, 1,0)))
MB_test <- MB %>% filter(Filter == F)
ggplot(data = MB_test,mapping = aes(x = TEAM_PITCHING_H, color = Pitch_H_Outlier, fill = Pitch_H_Outlier)) + geom_histogram(alpha = 0.5) + theme_bw()
ggplot(data = MB_test, mapping = aes(x = TEAM_PITCHING_H, y = TEAM_BATTING_H, color = Pitch_H_Outlier )) + geom_point() + theme_bw()
ggplot(data = MB_test, mapping = aes(x = TEAM_PITCHING_SO, y = TEAM_BATTING_SO, color = Pitch_H_Outlier )) + geom_point() + theme_bw()
ggplot(data = MB_test, mapping = aes(x = TEAM_PITCHING_BB, y = TEAM_BATTING_BB, color = Pitch_H_Outlier )) + geom_point() + theme_bw()
ggplot(data = MB_test, mapping = aes(x = TEAM_PITCHING_HR, y = TEAM_BATTING_HR, color = Pitch_H_Outlier )) + geom_point() + theme_bw()
MB <- MB  %>%
mutate(BatHR_Filter = as.logical(ifelse(TEAM_BATTING_HR <= 59, 1,0))) %>%
mutate(BatSO_Filter = as.logical(ifelse(TEAM_BATTING_SO <= 250, 1,0))) %>%
mutate(PitSO_Filter = as.logical(ifelse(TEAM_PITCHING_SO > 2000, 1, 0)))
MB$SO_BatPit <- rowSums(MB[,c('BatSO_Filter','PitSO_Filter')])
MB$SO_BatPit <- rowSums(MB[,c('BatSO_Filter','PitSO_Filter')])
MB$SO_BatPit_BetaDiff <- setdiff(MB$Pitch_H_Outlier,MB$SO_BatPit)
SO_BatPit_BetaDiff <- setdiff(MB$Pitch_H_Outlier,MB$SO_BatPit)
SO_BatPit_BetaDiff
setdiff(MB$Pitch_H_Outlier,MB$SO_BatPit)
MB$SO_BatPit
MB$Pitch_H_Outlier
MB$SO_BatPit[is.na(MB$SO_BatPit)] <- 0
SO_BatPit_BetaDiff <- setdiff(MB$Pitch_H_Outlier,MB$SO_BatPit)
MB$HRSO_Filter <- as.logical(ifelse(rowSums(MB[,c('BatHR_Filter','BatSO_Filter')]) > 0 ,1, 0))
SO_BatPit_BetaDiff
plot(MB$Pitch_H_Outlier,MB$SO_BatPit)
Pitch_H_outlierT <- MB$INDEX[MB$Pitch_H_Outlier]
BatSO_Filter_T <- MB$INDEX[MB$BatSO_Filter]
PitSOFilter_T <- MB$INDEX[MB$PitSO_Filter]
MB %>% mutate (flag = ifelse(INDEX %in% setdiff(setdiff(Pitch_H_outlierT,BatSO_Filter_T), PitSOFilter_T), 1,0))
MB <- MB %>% mutate (flag = as.logical(ifelse(INDEX %in% setdiff(setdiff(Pitch_H_outlierT,BatSO_Filter_T), PitSOFilter_T), 1,0)))
ggplot(data = MB, mapping = aes(x = TEAM_PITCHING_HR, y = TEAM_BATTING_HR, color = Pitch_H_Outlier )) + geom_point() + theme_bw()
ggplot(data = MB, mapping = aes(x = TEAM_PITCHING_HR, y = TEAM_BATTING_HR, color = flag )) + geom_point() + theme_bw()
ggplot(data = MB, mapping = aes(y = TEAM_BATTING_SO, x = TEAM_PITCHING_SO, color = flag)) + geom_point() + theme_bw()
ggplot(data = MB, mapping = aes(y = TEAM_BATTING_SO, x = TEAM_PITCHING_SO, color = BatSO_Filter)) + geom_point() + theme_bw()
ggplot(data = MB, mapping = aes(y = TEAM_BATTING_SO, x = TEAM_PITCHING_SO, color = flag)) + geom_point() + theme_bw()
ggplot(data = MB, mapping = aes(y = TEAM_BATTING_SO, x = TEAM_PITCHING_SO, color = BatSO_Filter)) + geom_point() + theme_bw()
ggplot(data = MB, mapping = aes(y = TEAM_BATTING_SO, x = TEAM_PITCHING_SO, color = PitSO_Filter)) + geom_point() + theme_bw()
reqcols <- colnames(MB)[c(-1,-11,-18:-27)]
reqcols
colnames(MB)
write.csv2(MB, file = "MB_revc.csv")
knitr::opts_chunk$set(echo = FALSE, warning = F, message = F)
library(magrittr)
library(dplyr)
# Read the data in
MB <- read.csv('MoneyBall.csv')
cols <- colnames(MB)
library(mosaic)
# Compute overall statistic and show missing values
sanitycheck <- do.call(rbind,dfapply(MB,favstats, select = is.numeric))
rowname <- rownames(sanitycheck)
sanitycheck <- sanitycheck %>%  mutate(cv = sd/mean)
rownames(sanitycheck) <- rowname
knitr::kable(round(sanitycheck,2), caption = "Summary Stats and missing values")
# indicator variables for record missing
MB <- MB %>%
mutate(Missing_BatSO = as.logical(ifelse(is.na(TEAM_BATTING_SO),1,0))) %>%
mutate(Missing_BasSB = as.logical(ifelse(is.na(TEAM_BASERUN_SB),1,0))) %>%
mutate(Missing_BasCS = as.logical(ifelse(is.na(TEAM_BASERUN_CS),1,0))) %>%
mutate(Missing_PitSO = as.logical(ifelse(is.na(TEAM_PITCHING_SO),1,0))) %>%
mutate(Missing_FieldDP = as.logical(ifelse(is.na(TEAM_FIELDING_DP),1,0)))
MB$Filter <- as.logical(ifelse(rowSums(MB[,18:22]) > 0 ,1, 0))
library(ggplot2)
# p0 <- ggplot(data = MB, mapping = aes(x = TEAM_BATTING_HR, color = Missing_BatSO, fill = Missing_BatSO)) + geom_histogram(alpha = 0.5)
p1 <- ggplot(data = MB, mapping = aes(x = TEAM_BATTING_HR, color = Filter, fill = Filter)) + geom_histogram(alpha = 0.5) + theme_bw()
p2 <- ggplot(data = MB, mapping = aes(x = TEAM_BATTING_SO, color = Filter, fill = Filter)) + geom_histogram(alpha = 0.5) + theme_bw()
gridExtra::grid.arrange(p1,p2,ncol = 2)
cordata <- MB %>% dplyr::select(cols[c(-1,-11)])
cordata <- cordata[complete.cases(cordata),]
corrplot::corrplot(cor(cordata),tl.cex = 0.8)
ggplot(data = MB, mapping = aes(x = TEAM_PITCHING_H, y = TEAM_BATTING_H, color = Filter)) + geom_point()
ggplot(data = MB, mapping = aes(x = TEAM_PITCHING_H, fill = Filter, color = Filter)) + geom_histogram(alpha = 0.5) + facet_grid(Filter ~ .)
MB <- MB %>%
dplyr::mutate(Pitch_H_Outlier = as.logical(ifelse(TEAM_PITCHING_H >= 1890, 1,0)))
MB_test <- MB %>% filter(Filter == F)
ggplot(data = MB_test,mapping = aes(x = TEAM_PITCHING_H, color = Pitch_H_Outlier, fill = Pitch_H_Outlier)) + geom_histogram(alpha = 0.5) + theme_bw()
ggplot(data = MB_test, mapping = aes(x = TEAM_PITCHING_H, y = TEAM_BATTING_H, color = Pitch_H_Outlier )) + geom_point() + theme_bw()
ggplot(data = MB_test, mapping = aes(x = TEAM_PITCHING_SO, y = TEAM_BATTING_SO, color = Pitch_H_Outlier )) + geom_point() + theme_bw()
ggplot(data = MB_test, mapping = aes(x = TEAM_PITCHING_BB, y = TEAM_BATTING_BB, color = Pitch_H_Outlier )) + geom_point() + theme_bw()
ggplot(data = MB_test, mapping = aes(x = TEAM_PITCHING_HR, y = TEAM_BATTING_HR, color = Pitch_H_Outlier )) + geom_point() + theme_bw()
MB <- MB  %>%
mutate(BatHR_Filter = as.logical(ifelse(TEAM_BATTING_HR <= 59, 1,0))) %>%
mutate(BatSO_Filter = as.logical(ifelse(TEAM_BATTING_SO <= 250, 1,0))) %>%
mutate(PitSO_Filter = as.logical(ifelse(TEAM_PITCHING_SO > 2000, 1, 0)))
colnames(MB)[1] <- "INDEX"
Pitch_H_outlierT <- MB$INDEX[MB$Pitch_H_Outlier]
BatSO_Filter_T <- MB$INDEX[MB$BatSO_Filter]
PitSOFilter_T <- MB$INDEX[MB$PitSO_Filter]
MB <- MB %>% mutate (flag = as.logical(ifelse(INDEX %in% setdiff(setdiff(Pitch_H_outlierT,BatSO_Filter_T), PitSOFilter_T), 1,0)))
MB$HRSO_Filter <- as.logical(ifelse(rowSums(MB[,c('BatHR_Filter','BatSO_Filter')]) > 0 ,1, 0))
ggplot(data = MB, mapping = aes(x = TEAM_PITCHING_HR, y = TEAM_BATTING_HR, color = Pitch_H_Outlier )) + geom_point() + theme_bw()
ggplot(data = MB, mapping = aes(y = TEAM_BATTING_SO, x = TEAM_PITCHING_SO, color = flag)) + geom_point() + theme_bw()
ggplot(data = MB, mapping = aes(y = TEAM_BATTING_SO, x = TEAM_PITCHING_SO, color = BatSO_Filter)) + geom_point() + theme_bw()
ggplot(data = MB, mapping = aes(y = TEAM_BATTING_SO, x = TEAM_PITCHING_SO, color = PitSO_Filter)) + geom_point() + theme_bw()
colnames(MB)[c(-1,-11,-18:-23,-25,-29)]
View(MB)
cordata <- MB %>% dplyr::select(reqcols)
reqcols <- colnames(MB)[c(-1,-11,-18:-23,-25,-29)]
cordata <- MB %>% dplyr::select(reqcols)
reqrows <- complete.cases(cordata)
cordata <- cordata[reqrows,]
cordata <- cordata %>%
dplyr::filter(BatSO_Filter == !T) %>%
dplyr::filter(PitSO_Filter == !T)
simplemod <- lm(formula = TARGET_WINS ~ TEAM_BATTING_H, data = cordata)
summary(simplemod)
simplemod <- lm(formula = TARGET_WINS ~ TEAM_BATTING_H + TEAM_BATTING_BB, data = cordata)
summary(simplemod)
simplemod <- lm(formula = TARGET_WINS ~ TEAM_BATTING_HR, data = cordata)
summary(simplemod)
simplemod <- lm(formula = TARGET_WINS ~ TEAM_BATTING_HR + TEAM_BATTING_H + TEAM_BATTING_BB + , data = cordata)
simplemod <- lm(formula = TARGET_WINS ~ TEAM_BATTING_HR + TEAM_BATTING_H + TEAM_BATTING_BB , data = cordata)
summary(simplemod)
simplemod <- lm(formula = TARGET_WINS ~ TEAM_BATTING_HR + TEAM_BATTING_H , data = cordata)
summary(simplemod)
simplemod <- lm(formula = TARGET_WINS ~ TEAM_BATTING_HR + TEAM_BATTING_H + Pitch_H_outlier , data = cordata)
simplemod <- lm(formula = TARGET_WINS ~ TEAM_BATTING_HR + TEAM_BATTING_H + Pitch_H_outlier , data = cordata)
cordata <- MB %>% dplyr::select(reqcols)
reqrows <- complete.cases(cordata)
cordata <- cordata[reqrows,]
cordata <- cordata %>%
dplyr::filter(BatSO_Filter == !T) %>%
dplyr::filter(PitSO_Filter == !T)
simplemod <- lm(formula = TARGET_WINS ~ TEAM_BATTING_HR + TEAM_BATTING_H + Pitch_H_outlier , data = cordata)
colnames(cordata)
simplemod <- lm(formula = TARGET_WINS ~ TEAM_BATTING_HR + TEAM_BATTING_H + Pitch_H_Outlier , data = cordata)
summary(simplemod)
simplemod <- lm(formula = TARGET_WINS ~ TEAM_BATTING_HR + Pitch_H_Outlier , data = cordata)
summary(simplemod)
simplemod <- lm(formula = TARGET_WINS ~ 1 , data = cordata)
summary(simplemod)
simplemod <- lm(formula = TARGET_WINS ~ . , data = cordata)
summary(simplemod)
x <- model.matrix(TARGET_WINS ~., data = cordata)[,-1]
colnames(x)[15:18] <- c("Pitch_H_Outlier","BatSO_Filter", "PitSO_Filter","flag")
x <- model.matrix(TARGET_WINS ~., data = cordata)[,-1]
colnames(x)
colnames(cordata)
x <- model.matrix(TARGET_WINS ~., data = cordata)[,-1]
View(x)
pca <- princomp(x[,-15:-18],cor = T)
summary(pca)
cumvariance <- cumsum(pca$sdev^2) / sum(pca$sdev^2)
plot(cumvariance, xlab = "Component Number", ylab = "Cumulative Variance", type = "l")
points(cumvariance)
x <- model.matrix(TARGET_WINS ~., data = cordata)[,-1]
colnames(x)[15:18] <- c("Pitch_H_Outlier","BatSO_Filter", "PitSO_Filter","flag")
pca <- princomp(x[,-15:-18],cor = T)
summary(pca)
cumvariance <- cumsum(pca$sdev^2) / sum(pca$sdev^2)
plot(cumvariance, xlab = "Component Number", ylab = "Cumulative Variance", type = "l")
points(cumvariance)
pca.scores <- pca$scores[,1:6]
#df <- data.frame(pca.scores,MB[reqrows,colnames(MB)[c(2,24)]])
df <- data.frame(pca.scores, x[,c(15,18)],MB[reqrows,2])
colnames(df)[9] <- c("TARGET_WINS")
library(MASS)
lower.lm <- lm(data = df, formula = TARGET_WINS ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6)
upper.lm <- lm(data = df, formula = TARGET_WINS ~ .)
step.lm <- stepAIC(lower.lm, scope = list(upper = formula(upper.lm), lower = ~1), direction = "both", trace = F)
summary(step.lm)
anova(step.lm)
plot(step.lm)
car::vif(step.lm)
library(glmnet)
grid = 10^seq(10,-2,length = 100)
lasso.out <- cv.glmnet(x,df$TARGET_WINS,alpha = 1)
plot(lasso.out)
lasso.mod <- glmnet(x,df$TARGET_WINS,alpha = 1, lambda = lasso.out$lambda.min)
# important factors for feature selection or imputation
names(coef(lasso.mod)[order(abs(round(coef(lasso.mod),3)),decreasing = T),])[1:12]
# R Squared
lasso.mod$dev.ratio
ggplot(data = cordata, mapping = aes(y = TEAM_PITCHING_SO, x = TEAM_BATTING_3B, color = flag)) + geom_point() + theme_bw()+ geom_smooth(method = "lm")
pca.scores <- pca$scores[,1:9]
df <- data.frame(pca.scores, x[,c(15,18)],MB[reqrows,2])
colnames(df)[9] <- c("TARGET_WINS")
library(MASS)
lower.lm <- lm(data = df, formula = TARGET_WINS ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6)
upper.lm <- lm(data = df, formula = TARGET_WINS ~ .)
step.lm <- stepAIC(lower.lm, scope = list(upper = formula(upper.lm), lower = ~1), direction = "both", trace = F)
summary(step.lm)
pca.scores <- pca$scores[,1:6]
df <- data.frame(pca.scores, x[,c(15,18)],MB[reqrows,2])
colnames(df)[9] <- c("TARGET_WINS")
library(MASS)
lower.lm <- lm(data = df, formula = TARGET_WINS ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6)
upper.lm <- lm(data = df, formula = TARGET_WINS ~ .)
step.lm <- stepAIC(lower.lm, scope = list(upper = formula(upper.lm), lower = ~1), direction = "both", trace = F)
summary(step.lm)
lower.lm <- lm(data = df, formula = TARGET_WINS ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6 + flag)
upper.lm <- lm(data = df, formula = TARGET_WINS ~ .)
step.lm <- stepAIC(lower.lm, scope = list(upper = formula(upper.lm), lower = ~1), direction = "both", trace = F)
summary(step.lm)
ggplot(data = cordata, mapping = aes(y = TEAM_FIELDING_E, x = TEAM_BATTING_3B, color = flag)) + geom_point() + theme_bw()+ geom_smooth(method = "lm")
names(coef(lasso.mod)[order(abs(round(coef(lasso.mod),3)),decreasing = T),])[1:12]
ggplot(data = cordata, mapping = aes(y = TEAM_FIELDING_E, x = TEAM_BATTING_HR, color = Pitch_H_Outlier) + geom_point() + theme_bw()+ geom_smooth(method = "lm")
ggplot(data = cordata, mapping = aes(y = TEAM_FIELDING_E, x = TEAM_BATTING_HR, color = Pitch_H_Outlier)) + geom_point() + theme_bw()+ geom_smooth(method = "lm")
ggplot(data = cordata, mapping = aes(y = TEAM_FIELDING_E, x = TEAM_BATTING_HR, color = Pitch_H_Outlier)) + geom_point() + theme_bw()+ geom_smooth(method = "lm")
ggplot(data = cordata, mapping = aes(y = TEAM_FIELDING_E, x = TEAM_BATTING_HR, color = flag)) + geom_point() + theme_bw()+ geom_smooth(method = "lm")
ggplot(data = cordata, mapping = aes(y = TARGET_WINS, x = TEAM_BATTING_HR, color = flag)) + geom_point() + theme_bw()+ geom_smooth(method = "lm")
names(coef(lasso.mod)[order(abs(round(coef(lasso.mod),3)),decreasing = T),])[1:12]
ggplot(data = cordata, mapping = aes(y = TEAM_FIELDING_E, x = TEAM_BATTING_3B, color = Pitch_H_Outlier)) + geom_point() + theme_bw()+ geom_smooth(method = "lm")
names(coef(lasso.mod)[order(abs(round(coef(lasso.mod),3)),decreasing = T),])[1:12]
ggplot(data = cordata, mapping = aes(y = TEAM_FIELDING_E, x = TEAM_BATTING_3B, color = Pitch_H_Outlier)) + geom_point() + theme_bw()+ geom_smooth(method = "lm")
names(coef(lasso.mod)[order(abs(round(coef(lasso.mod),3)),decreasing = T),])[1:12]
summary(lm(data = cordata ,  TARGET_WINS ~ Pitch_H_Outlier + TEAM_BATTING_3B + TEAM_FIELDING_E + TEAM_FIELDING_DP + TEAM_BATTING_HR + TEAM_BATTING_2B + TEAM_BASERUN_CS ))
cordata$Pitch_H_Outlier <- as.numeric(cordata$Pitch_H_Outlier)
summary(lm(data = cordata ,  TARGET_WINS ~ Pitch_H_Outlier + TEAM_BATTING_3B + TEAM_FIELDING_E + TEAM_FIELDING_DP + TEAM_BATTING_HR + TEAM_BATTING_2B + TEAM_BASERUN_CS ))
summary(lm(data = cordata ,  TARGET_WINS ~ flag + TEAM_BATTING_3B + TEAM_FIELDING_E + TEAM_FIELDING_DP + TEAM_BATTING_HR + TEAM_BATTING_2B + TEAM_BASERUN_CS ))
summary(lm(data = cordata ,  TARGET_WINS ~ flag + TEAM_FIELDING_E + TEAM_FIELDING_DP + TEAM_BATTING_H  + TEAM_BASERUN_CS ))
vif.lm <- VIF::vif(df$TARGET_WINS,x)
install.packages('VIF')
simplemod <- lm(formula = TARGET_WINS ~ . , data = cordata)
summary(simplemod)
lasso.mod$dev.ratio
vif.lm <- VIF::vif(df$TARGET_WINS,x)
vifdata <- data.frame(vif.lm$modelmatrix,scale(df$TARGET_WINS))
summary(lm(data = vifdata, formula = scale.df.TARGET_WINS. ~ .))
ncol(x)
ncol(cordata)
vif.lm$select
summary(lm(data = vifdata, formula = scale.df.TARGET_WINS. ~ .))
MB2 <- kNN(data = MB,variable = colnames(MB)[c(-1,-11,-18:-27)], k = 5 )
library(VIM)
MB2 <- kNN(data = MB,variable = colnames(MB)[c(-1,-11,-18:-27)], k = 5 )
sanitycheck2 <- do.call(rbind,dfapply(MB2,favstats, select = is.numeric))
MB2 <- MB2 %>% subset(select = rownames(sanitycheck2))
MB2 <- MB2[,c(-1,-11)]
x1 <- model.matrix(TARGET_WINS ~ ., data = MB2)
pca2 <- princomp(x1,cor = T)
cumvariance2 <- cumsum(pca2$sdev^2) / sum(pca2$sdev^2)
plot(cumvariance2, xlab = "Component Number", ylab = "Cumulative Variance", type = "l")
pca2.scores <- pca2$scores[,1:9]
plot(cumvariance2, xlab = "Component Number", ylab = "Cumulative Variance", type = "l")
points(cumvariance2)
pca2.scores <- pca2$scores[,1:6]
df2 <- data.frame(pca2.scores,MB2$TARGET_WINS)
colnames(df2)[10] <- 'TARGET_WINS'
colnames(df2)[7] <- 'TARGET_WINS'
lower2.lm <- lm(data = df2, formula = TARGET_WINS ~ 1)
upper2.lm <- lm(data = df2, formula = TARGET_WINS ~ .)
step2.lm <- stepAIC(lower2.lm, scope = list(upper = formula(upper2.lm), lower = ~1), direction = "both", trace = F)
summary(step2.lm)
anova(step2.lm)
library(plsr)
install.packages('plsr')
library(plsr)
install.packages('plsr')
library(plsr)
sessionInfo()
library(pls)
install.packages('pls')
pls::plsr(TARGET_WINS ~ ., data  = cordata)
pls.lm <- pls::plsr(TARGET_WINS ~ ., data  = cordata)
pls.lm <- pls::plsr(TARGET_WINS ~ ., data  = cordata, scale = T, validation = "cv")
pls.lm <- pls::plsr(TARGET_WINS ~ ., data  = cordata, scale = T, validation = "CV")
pls::validationplot(pls.lm)
pls::validationplot(pls.lm, val.type = "MSEP")
summary(pls.lm)
head(x)
plsdf <- data.frame(x[,-15:-18], cordata$TARGET_WINS)
names(plsdf)
names(plsdf)[15] <- "TARGET_WINS"
pls.lm <- pls::plsr(TARGET_WINS ~ ., data  = plsdf, scale = T, validation = "CV")
pls::validationplot(pls.lm, val.type = "MSEP")
pls::validationplot(pls.lm, val.type = "RMSEP")
summary(pls.lm)
pls::validationplot(pls.lm, val.type = "RMSEP")
pls::validationplot(pls.lm, val.type = RMSEP)
pls::validationplot(pls.lm, val.type = "MSEP")
library(pls)
validationplot(pls.lm, val.type = "MSEP")
head(pls.lm$residuals)
res <- pls.lm$residuals
View(res)
plot(plsdf$TARGET_WINS,res[,6])
plot(plsdf$TARGET_WINS,res[,1,6])
cor(plsdf$TARGET_WINS,res[,1,6])
caret::varImp(pls.lm)
plot(caret::varImp(pls.lm))
plot(caret::varImp(pls.lm),10)
library(caret)
varImp(pls.lm,top = 10)
plot(varImp(pls.lm,top = 10))
plot(varImp(pls.lm),top = 10)
plot(varImp(pls.lm),top = 10)
plot(varImp(pls.lm),top = 10)
pls.lm <- pls::plsr(TARGET_WINS ~ ., data  = plsdf, scale = T, validation = "CV",ncomp = 6)
plot(varImp(pls.lm))
install.packages('randomForest')
randomForest::varImpPlot(pls.lm)
plot(pls.lm)
plot(pls.lm$residuals,plsdf$TARGET_WINS)
plot(pls.lm$residuals,pls.lm$fitted.values)
plsdata <- data.frame(pls.lm$residuals,pls.lm$fitted.values)
View(plsdata)
pls.lm$ncomp
summary(pls.lm)
pls.lm$coefficients
pls.lm$terms
pls.lm$coefficients
test <- pls.lm$coefficients[,1,6]
test
ans <- test %*% x[,-15:-18]
mat <- x[,-15:-18]
ans <- test %*% mat
test
mat %*% test
scale(mat) %*% test
ans <- scale(mat) %*% test
ans2 <- pls.lm$fitted.values
View(ans2)
pls.lm$model
summary.mvr(pls.lm)
mvr(pls.lm)
rsquared(pls.lm)
coef(pls.lm)
plot(pls.lm$projection)
pls.lm$fit.time
pls.lm$Yscores
summary(pls.lm)
explvar(pls.lm)
head(x)
head(pls.lm$projection)
(pls.lm$projection)
test
pls.lm$scores %*% test
pls.lm$scores
test %*% pls.lm$scores
pls.lm$validation$coefficients
pls.lm$validation
coef(pls.lm)
pls.lm$loadings
summary(pls.lm)
coef(pls.lm,intercept = T)
coefs <- as.data.frame(coef(pls.lm,intercept = T))
coefs
car::vif(pls.lm)
R2(pls.lm)
pls::R2(pls.lm)
plot(R2(pls.lm))
library(pls)
plot(R2(pls.lm))
plot(pls::R2(pls.lm))
colnames(cordata)
pls.lm <- pls::plsr(TARGET_WINS ~ ., data  = cordata, scale = T, validation = "cv")
pls.lm <- pls::plsr(TARGET_WINS ~ ., data  = cordata, scale = T, validation = "CV")
plot(pls.lm)
validationplot(pls.lm)
pls.lm
summary(pls.lm)
plsdf <- data.frame(x[,-15:-18], cordata$TARGET_WINS)
names(plsdf)[15] <- "TARGET_WINS"
pls.lm <- pls::plsr(TARGET_WINS ~ ., data  = plsdf, scale = T, validation = "CV")
pls::validationplot(pls.lm, val.type = "RMSEP")
plot(varImp(pls.lm),top = 10)
plot(varImp(pls.lm),top = 10,rownames(pls.lm))
plot(varImp(pls.lm),top = 10,rownames(pls.lm$coefficients))
plot(varImp(pls.lm),top = 10)
plot(pls::R2(pls.lm))
